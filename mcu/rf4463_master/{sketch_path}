
/private/var/folders/6m/81xp0qb53gs0sk3w50_smqvh0000gn/T/arduino/sketches/4880584FC0B55889E2E6BAEEF916FA48/rf4463_master.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_16>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__vector_18>
      4c:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__vector_19>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__vector_24>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	de 00       	.word	0x00de	; ????
      ce:	99 05       	cpc	r25, r9
      d0:	a1 08       	sbc	r10, r1

000000d2 <__ctors_end>:
__dtors_end():
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      de:	12 e0       	ldi	r17, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      e0:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e2:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e4:	ea ea       	ldi	r30, 0xAA	; 170
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e6:	f6 e1       	ldi	r31, 0x16	; 22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ea:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ec:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ee:	a2 3f       	cpi	r26, 0xF2	; 242
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      f0:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f4:	24 e0       	ldi	r18, 0x04	; 4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f6:	a2 ef       	ldi	r26, 0xF2	; 242
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f8:	b2 e0       	ldi	r27, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fe:	ae 33       	cpi	r26, 0x3E	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     100:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     104:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     106:	c9 e6       	ldi	r28, 0x69	; 105
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     108:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     10a:	04 c0       	rjmp	.+8      	; 0x114 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10c:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10e:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     110:	0e 94 44 0b 	call	0x1688	; 0x1688 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     114:	c6 36       	cpi	r28, 0x66	; 102
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     116:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     118:	c9 f7       	brne	.-14     	; 0x10c <__do_global_ctors+0x8>
     11a:	0e 94 86 09 	call	0x130c	; 0x130c <main>
     11e:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <_exit>

00000122 <__bad_interrupt>:
__vector_22():
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <setup>:
_ZN14HardwareSerial5beginEm():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     126:	26 e0       	ldi	r18, 0x06	; 6
     128:	40 e8       	ldi	r20, 0x80	; 128
     12a:	55 e2       	ldi	r21, 0x25	; 37
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	88 e9       	ldi	r24, 0x98	; 152
     132:	93 e0       	ldi	r25, 0x03	; 3
     134:	0e 94 e7 07 	call	0xfce	; 0xfce <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:33
uint8_t count = 0;

void setup() {
  Serial.begin(9600);

  if(!rf4463.init())
     138:	83 ef       	ldi	r24, 0xF3	; 243
     13a:	92 e0       	ldi	r25, 0x02	; 2
     13c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RF4463::init()>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:34
    Serial.println("Init fail!");
     140:	64 e2       	ldi	r22, 0x24	; 36
     142:	71 e0       	ldi	r23, 0x01	; 1
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:33
uint8_t count = 0;

void setup() {
  Serial.begin(9600);

  if(!rf4463.init())
     144:	88 23       	and	r24, r24
     146:	11 f0       	breq	.+4      	; 0x14c <setup+0x26>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:36
    Serial.println("Init fail!");
  else
    Serial.println("Init success!");
     148:	6f e2       	ldi	r22, 0x2F	; 47
     14a:	71 e0       	ldi	r23, 0x01	; 1
     14c:	88 e9       	ldi	r24, 0x98	; 152
     14e:	93 e0       	ldi	r25, 0x03	; 3
     150:	0e 94 0e 09 	call	0x121c	; 0x121c <Print::println(char const*)>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:39


  if(!rf4463.setTxPower(127))
     154:	6f e7       	ldi	r22, 0x7F	; 127
     156:	83 ef       	ldi	r24, 0xF3	; 243
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	0e 94 35 02 	call	0x46a	; 0x46a <RF4463::setTxPower(unsigned char)>
     15e:	81 11       	cpse	r24, r1
     160:	06 c0       	rjmp	.+12     	; 0x16e <setup+0x48>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:40
    Serial.println("Failed to set power to max!");
     162:	6d e3       	ldi	r22, 0x3D	; 61
     164:	71 e0       	ldi	r23, 0x01	; 1
     166:	88 e9       	ldi	r24, 0x98	; 152
     168:	93 e0       	ldi	r25, 0x03	; 3
     16a:	0c 94 0e 09 	jmp	0x121c	; 0x121c <Print::println(char const*)>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:41
}
     16e:	08 95       	ret

00000170 <loop>:
loop():
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:44

void loop() {
  rf4463.txPacket(tx_buf,sizeof(tx_buf));
     170:	4c e0       	ldi	r20, 0x0C	; 12
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	71 e0       	ldi	r23, 0x01	; 1
     176:	83 ef       	ldi	r24, 0xF3	; 243
     178:	92 e0       	ldi	r25, 0x02	; 2
     17a:	0e 94 a8 04 	call	0x950	; 0x950 <RF4463::txPacket(unsigned char*, unsigned char)>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:46

  Serial.println("tx ");
     17e:	69 e5       	ldi	r22, 0x59	; 89
     180:	71 e0       	ldi	r23, 0x01	; 1
     182:	88 e9       	ldi	r24, 0x98	; 152
     184:	93 e0       	ldi	r25, 0x03	; 3
     186:	0e 94 0e 09 	call	0x121c	; 0x121c <Print::println(char const*)>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:47
  Serial.print(count, DEC);
     18a:	4a e0       	ldi	r20, 0x0A	; 10
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	60 91 f2 02 	lds	r22, 0x02F2	; 0x8002f2 <__data_end>
     192:	88 e9       	ldi	r24, 0x98	; 152
     194:	93 e0       	ldi	r25, 0x03	; 3
     196:	0e 94 7e 09 	call	0x12fc	; 0x12fc <Print::print(unsigned char, int)>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:48
  Serial.println("\n");
     19a:	60 ef       	ldi	r22, 0xF0	; 240
     19c:	72 e0       	ldi	r23, 0x02	; 2
     19e:	88 e9       	ldi	r24, 0x98	; 152
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	0e 94 0e 09 	call	0x121c	; 0x121c <Print::println(char const*)>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:49
  count += 1;
     1a6:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <__data_end>
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <__data_end>
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:51

  delay(10);
     1b0:	6a e0       	ldi	r22, 0x0A	; 10
     1b2:	70 e0       	ldi	r23, 0x00	; 0
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <delay>

000001bc <_GLOBAL__sub_I_rf4463>:
_GLOBAL__sub_I_rf4463():
/Users/kevinlutzer/Projects/labs/mcu/rf4463_master/rf4463_master.ino:22

#define IRQ 2
#define SDN 9 // 
#define SEL 10 // 

RF4463 rf4463 = RF4463(IRQ, SDN, SEL);
     1bc:	2a e0       	ldi	r18, 0x0A	; 10
     1be:	49 e0       	ldi	r20, 0x09	; 9
     1c0:	62 e0       	ldi	r22, 0x02	; 2
     1c2:	83 ef       	ldi	r24, 0xF3	; 243
     1c4:	92 e0       	ldi	r25, 0x02	; 2
     1c6:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <RF4463::RF4463(unsigned char, unsigned char, unsigned char)>

000001ca <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:237
	uint8_t rxLen;
	rxLen=ReadRxFifo(recvbuf);			// read data from fifo
	fifoReset();						// clr fifo

	return rxLen;
}
     1ca:	8e bd       	out	0x2e, r24	; 46
     1cc:	00 00       	nop
     1ce:	0d b4       	in	r0, 0x2d	; 45
     1d0:	07 fe       	sbrs	r0, 7
     1d2:	fd cf       	rjmp	.-6      	; 0x1ce <SPIClass::transfer(unsigned char)+0x4>
     1d4:	8e b5       	in	r24, 0x2e	; 46
     1d6:	08 95       	ret

000001d8 <RF4463::RF4463(unsigned char, unsigned char, unsigned char)>:
_ZN6RF4463C2Ehhh():
     1d8:	fc 01       	movw	r30, r24
     1da:	60 83       	st	Z, r22
     1dc:	41 83       	std	Z+1, r20	; 0x01
     1de:	22 83       	std	Z+2, r18	; 0x02
     1e0:	08 95       	ret

000001e2 <RF4463::spiInit()>:
_ZN6RF44637spiInitEv():
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
     1e8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <SPIClass::begin()>
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	8a 81       	ldd	r24, Y+2	; 0x02
     1f0:	0e 94 8e 0a 	call	0x151c	; 0x151c <pinMode>
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
_ZN8SPIClass11setBitOrderEh():
     1fc:	8c b5       	in	r24, 0x2c	; 44
     1fe:	8f 7d       	andi	r24, 0xDF	; 223
     200:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass15setClockDividerEh():
     202:	8c b5       	in	r24, 0x2c	; 44
     204:	8c 7f       	andi	r24, 0xFC	; 252
     206:	81 60       	ori	r24, 0x01	; 1
     208:	8c bd       	out	0x2c, r24	; 44
     20a:	8d b5       	in	r24, 0x2d	; 45
     20c:	8e 7f       	andi	r24, 0xFE	; 254
     20e:	8d bd       	out	0x2d, r24	; 45
_ZN8SPIClass11setDataModeEh():
     210:	8c b5       	in	r24, 0x2c	; 44
     212:	83 7f       	andi	r24, 0xF3	; 243
     214:	8c bd       	out	0x2c, r24	; 44
_ZN6RF44637spiInitEv():
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <RF4463::pinInit()>:
_ZN6RF44637pinInitEv():
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	0e 94 8e 0a 	call	0x151c	; 0x151c <pinMode>
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	88 81       	ld	r24, Y
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <pinMode>

0000023e <RF4463::waitnIRQ()>:
_ZN6RF44638waitnIRQEv():
     23e:	fc 01       	movw	r30, r24
     240:	80 81       	ld	r24, Z
     242:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <digitalRead>
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	89 2b       	or	r24, r25
     24a:	09 f0       	breq	.+2      	; 0x24e <RF4463::waitnIRQ()+0x10>
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	82 2f       	mov	r24, r18
     250:	08 95       	ret

00000252 <RF4463::checkCTS()>:
_ZN6RF44638checkCTSEv():
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	ec 01       	movw	r28, r24
     25c:	05 ec       	ldi	r16, 0xC5	; 197
     25e:	19 e0       	ldi	r17, 0x09	; 9
     260:	01 50       	subi	r16, 0x01	; 1
     262:	11 09       	sbc	r17, r1
     264:	d1 f0       	breq	.+52     	; 0x29a <RF4463::checkCTS()+0x48>
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
_ZN6RF44637spiByteEh():
     26e:	84 e4       	ldi	r24, 0x44	; 68
     270:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SPIClass::transfer(unsigned char)>
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SPIClass::transfer(unsigned char)>
_ZN6RF44638checkCTSEv():
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	8f 3f       	cpi	r24, 0xFF	; 255
     27e:	49 f4       	brne	.+18     	; 0x292 <RF4463::checkCTS()+0x40>
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	08 95       	ret
     292:	8a 81       	ldd	r24, Y+2	; 0x02
     294:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     298:	e3 cf       	rjmp	.-58     	; 0x260 <RF4463::checkCTS()+0xe>
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	f5 cf       	rjmp	.-22     	; 0x288 <RF4463::checkCTS()+0x36>

0000029e <RF4463::spiWriteBuf(unsigned char, unsigned char*)>:
_ZN6RF446311spiWriteBufEhPh():
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	c6 2f       	mov	r28, r22
     2a6:	8a 01       	movw	r16, r20
     2a8:	c1 50       	subi	r28, 0x01	; 1
     2aa:	30 f0       	brcs	.+12     	; 0x2b8 <RF4463::spiWriteBuf(unsigned char, unsigned char*)+0x1a>
_ZN6RF44637spiByteEh():
     2ac:	f8 01       	movw	r30, r16
     2ae:	81 91       	ld	r24, Z+
     2b0:	8f 01       	movw	r16, r30
     2b2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SPIClass::transfer(unsigned char)>
     2b6:	f8 cf       	rjmp	.-16     	; 0x2a8 <RF4463::spiWriteBuf(unsigned char, unsigned char*)+0xa>
_ZN6RF446311spiWriteBufEhPh():
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	08 95       	ret

000002c0 <RF4463::powerOnReset()>:
_ZN6RF446312powerOnResetEv():
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <RF4463::powerOnReset()+0xa>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <RF4463::powerOnReset()+0xc>
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <RF4463::powerOnReset()+0xe>
     2ce:	1f 92       	push	r1
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	8c 01       	movw	r16, r24
     2d6:	87 e0       	ldi	r24, 0x07	; 7
     2d8:	ec e0       	ldi	r30, 0x0C	; 12
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	de 01       	movw	r26, r28
     2de:	11 96       	adiw	r26, 0x01	; 1
     2e0:	01 90       	ld	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	8a 95       	dec	r24
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <RF4463::powerOnReset()+0x20>
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	f8 01       	movw	r30, r16
     2ec:	81 81       	ldd	r24, Z+1	; 0x01
     2ee:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     2f2:	64 e6       	ldi	r22, 0x64	; 100
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 04 0a 	call	0x1408	; 0x1408 <delay>
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	f8 01       	movw	r30, r16
     302:	81 81       	ldd	r24, Z+1	; 0x01
     304:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     308:	64 e1       	ldi	r22, 0x14	; 20
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 04 0a 	call	0x1408	; 0x1408 <delay>
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	f8 01       	movw	r30, r16
     318:	82 81       	ldd	r24, Z+2	; 0x02
     31a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     31e:	ae 01       	movw	r20, r28
     320:	4f 5f       	subi	r20, 0xFF	; 255
     322:	5f 4f       	sbci	r21, 0xFF	; 255
     324:	67 e0       	ldi	r22, 0x07	; 7
     326:	c8 01       	movw	r24, r16
     328:	0e 94 4f 01 	call	0x29e	; 0x29e <RF4463::spiWriteBuf(unsigned char, unsigned char*)>
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	f8 01       	movw	r30, r16
     330:	82 81       	ldd	r24, Z+2	; 0x02
     332:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     336:	68 ec       	ldi	r22, 0xC8	; 200
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 04 0a 	call	0x1408	; 0x1408 <delay>
     342:	27 96       	adiw	r28, 0x07	; 7
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	08 95       	ret

00000358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>:
_ZN6RF446313setPropertiesEjhPh():
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)+0x16>
     36e:	00 d0       	rcall	.+0      	; 0x370 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)+0x18>
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	8c 01       	movw	r16, r24
     376:	b6 2e       	mov	r11, r22
     378:	a7 2e       	mov	r10, r23
     37a:	e4 2e       	mov	r14, r20
     37c:	69 01       	movw	r12, r18
     37e:	0e 94 29 01 	call	0x252	; 0x252 <RF4463::checkCTS()>
     382:	f8 2e       	mov	r15, r24
     384:	88 23       	and	r24, r24
     386:	d9 f0       	breq	.+54     	; 0x3be <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)+0x66>
     388:	81 e1       	ldi	r24, 0x11	; 17
     38a:	89 83       	std	Y+1, r24	; 0x01
     38c:	aa 82       	std	Y+2, r10	; 0x02
     38e:	eb 82       	std	Y+3, r14	; 0x03
     390:	bc 82       	std	Y+4, r11	; 0x04
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	f8 01       	movw	r30, r16
     396:	82 81       	ldd	r24, Z+2	; 0x02
     398:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     39c:	ae 01       	movw	r20, r28
     39e:	4f 5f       	subi	r20, 0xFF	; 255
     3a0:	5f 4f       	sbci	r21, 0xFF	; 255
     3a2:	64 e0       	ldi	r22, 0x04	; 4
     3a4:	c8 01       	movw	r24, r16
     3a6:	0e 94 4f 01 	call	0x29e	; 0x29e <RF4463::spiWriteBuf(unsigned char, unsigned char*)>
     3aa:	a6 01       	movw	r20, r12
     3ac:	6e 2d       	mov	r22, r14
     3ae:	c8 01       	movw	r24, r16
     3b0:	0e 94 4f 01 	call	0x29e	; 0x29e <RF4463::spiWriteBuf(unsigned char, unsigned char*)>
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	f8 01       	movw	r30, r16
     3b8:	82 81       	ldd	r24, Z+2	; 0x02
     3ba:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     3be:	8f 2d       	mov	r24, r15
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	df 90       	pop	r13
     3d6:	cf 90       	pop	r12
     3d8:	bf 90       	pop	r11
     3da:	af 90       	pop	r10
     3dc:	08 95       	ret

000003de <RF4463::setTxInterrupt()>:
_ZN6RF446314setTxInterruptEv():
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <RF4463::setTxInterrupt()+0x6>
     3e4:	1f 92       	push	r1
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__data_start+0x13>
     3ee:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__data_start+0x14>
     3f2:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <__data_start+0x15>
     3f6:	29 83       	std	Y+1, r18	; 0x01
     3f8:	3a 83       	std	Y+2, r19	; 0x02
     3fa:	4b 83       	std	Y+3, r20	; 0x03
     3fc:	9e 01       	movw	r18, r28
     3fe:	2f 5f       	subi	r18, 0xFF	; 255
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	43 e0       	ldi	r20, 0x03	; 3
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <RF4463::setSyncWords(unsigned char*, unsigned char)>:
_ZN6RF446312setSyncWordsEPhh():
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	00 d0       	rcall	.+0      	; 0x422 <RF4463::setSyncWords(unsigned char*, unsigned char)+0xa>
     422:	00 d0       	rcall	.+0      	; 0x424 <RF4463::setSyncWords(unsigned char*, unsigned char)+0xc>
     424:	1f 92       	push	r1
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	2f ef       	ldi	r18, 0xFF	; 255
     42c:	24 0f       	add	r18, r20
     42e:	23 30       	cpi	r18, 0x03	; 3
     430:	d0 f4       	brcc	.+52     	; 0x466 <RF4463::setSyncWords(unsigned char*, unsigned char)+0x4e>
     432:	8c 01       	movw	r16, r24
     434:	29 83       	std	Y+1, r18	; 0x01
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	ce 01       	movw	r24, r28
     43a:	02 96       	adiw	r24, 0x02	; 2
     43c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <memcpy>
     440:	9e 01       	movw	r18, r28
     442:	2f 5f       	subi	r18, 0xFF	; 255
     444:	3f 4f       	sbci	r19, 0xFF	; 255
     446:	45 e0       	ldi	r20, 0x05	; 5
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	71 e1       	ldi	r23, 0x11	; 17
     44c:	c8 01       	movw	r24, r16
     44e:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	f4 cf       	rjmp	.-24     	; 0x452 <RF4463::setSyncWords(unsigned char*, unsigned char)+0x3a>

0000046a <RF4463::setTxPower(unsigned char)>:
_ZN6RF446310setTxPowerEh():
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <RF4463::setTxPower(unsigned char)+0xa>
     474:	00 d0       	rcall	.+0      	; 0x476 <RF4463::setTxPower(unsigned char)+0xc>
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	67 fd       	sbrc	r22, 7
     47c:	1e c0       	rjmp	.+60     	; 0x4ba <RF4463::setTxPower(unsigned char)+0x50>
     47e:	00 91 19 01 	lds	r16, 0x0119	; 0x800119 <__data_start+0x19>
     482:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <__data_start+0x1a>
     486:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <__data_start+0x1b>
     48a:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <__data_start+0x1c>
     48e:	09 83       	std	Y+1, r16	; 0x01
     490:	1a 83       	std	Y+2, r17	; 0x02
     492:	2b 83       	std	Y+3, r18	; 0x03
     494:	3c 83       	std	Y+4, r19	; 0x04
     496:	6a 83       	std	Y+2, r22	; 0x02
     498:	9e 01       	movw	r18, r28
     49a:	2f 5f       	subi	r18, 0xFF	; 255
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	44 e0       	ldi	r20, 0x04	; 4
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	72 e2       	ldi	r23, 0x22	; 34
     4a4:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	f5 cf       	rjmp	.-22     	; 0x4a8 <RF4463::setTxPower(unsigned char)+0x3e>

000004be <RF4463::setCommand(unsigned char, unsigned char, unsigned char*)>:
_ZN6RF446310setCommandEhhPh():
     4be:	df 92       	push	r13
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24
     4ce:	06 2f       	mov	r16, r22
     4d0:	d4 2e       	mov	r13, r20
     4d2:	79 01       	movw	r14, r18
     4d4:	0e 94 29 01 	call	0x252	; 0x252 <RF4463::checkCTS()>
     4d8:	18 2f       	mov	r17, r24
     4da:	88 23       	and	r24, r24
     4dc:	81 f0       	breq	.+32     	; 0x4fe <RF4463::setCommand(unsigned char, unsigned char, unsigned char*)+0x40>
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
_ZN6RF44637spiByteEh():
     4e6:	8d 2d       	mov	r24, r13
     4e8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SPIClass::transfer(unsigned char)>
_ZN6RF446310setCommandEhhPh():
     4ec:	a7 01       	movw	r20, r14
     4ee:	60 2f       	mov	r22, r16
     4f0:	ce 01       	movw	r24, r28
     4f2:	0e 94 4f 01 	call	0x29e	; 0x29e <RF4463::spiWriteBuf(unsigned char, unsigned char*)>
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
     4fa:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
     4fe:	81 2f       	mov	r24, r17
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	08 95       	ret

00000510 <RF4463::setConfig(unsigned char const*, unsigned int)>:
_ZN6RF44639setConfigEPKhj():
     510:	6f 92       	push	r6
     512:	7f 92       	push	r7
     514:	8f 92       	push	r8
     516:	9f 92       	push	r9
     518:	af 92       	push	r10
     51a:	bf 92       	push	r11
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	6e 97       	sbiw	r28, 0x1e	; 30
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	5c 01       	movw	r10, r24
     53e:	7b 01       	movw	r14, r22
     540:	6a 01       	movw	r12, r20
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	c8 1a       	sub	r12, r24
     546:	d1 08       	sbc	r13, r1
     548:	fb 01       	movw	r30, r22
     54a:	80 81       	ld	r24, Z
     54c:	08 2f       	mov	r16, r24
     54e:	10 e0       	ldi	r17, 0x00	; 0
     550:	0f 5f       	subi	r16, 0xFF	; 255
     552:	1f 4f       	sbci	r17, 0xFF	; 255
     554:	0c 15       	cp	r16, r12
     556:	1d 05       	cpc	r17, r13
     558:	e8 f4       	brcc	.+58     	; 0x594 <RF4463::setConfig(unsigned char const*, unsigned int)+0x84>
     55a:	f7 01       	movw	r30, r14
     55c:	e0 0f       	add	r30, r16
     55e:	f1 1f       	adc	r31, r17
     560:	90 80       	ld	r9, Z
     562:	9a 94       	dec	r9
     564:	0e 5f       	subi	r16, 0xFE	; 254
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	81 80       	ldd	r8, Z+1	; 0x01
     56a:	69 2c       	mov	r6, r9
     56c:	71 2c       	mov	r7, r1
     56e:	b7 01       	movw	r22, r14
     570:	60 0f       	add	r22, r16
     572:	71 1f       	adc	r23, r17
     574:	a3 01       	movw	r20, r6
     576:	ce 01       	movw	r24, r28
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <memcpy>
     57e:	9e 01       	movw	r18, r28
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	48 2d       	mov	r20, r8
     586:	69 2d       	mov	r22, r9
     588:	c5 01       	movw	r24, r10
     58a:	0e 94 5f 02 	call	0x4be	; 0x4be <RF4463::setCommand(unsigned char, unsigned char, unsigned char*)>
     58e:	06 0d       	add	r16, r6
     590:	17 1d       	adc	r17, r7
     592:	e0 cf       	rjmp	.-64     	; 0x554 <RF4463::setConfig(unsigned char const*, unsigned int)+0x44>
     594:	6e 96       	adiw	r28, 0x1e	; 30
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	bf 90       	pop	r11
     5b2:	af 90       	pop	r10
     5b4:	9f 90       	pop	r9
     5b6:	8f 90       	pop	r8
     5b8:	7f 90       	pop	r7
     5ba:	6f 90       	pop	r6
     5bc:	08 95       	ret

000005be <RF4463::enterTxMode()>:
_ZN6RF446311enterTxModeEv():
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <RF4463::enterTxMode()+0x6>
     5c4:	00 d0       	rcall	.+0      	; 0x5c6 <RF4463::enterTxMode()+0x8>
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	19 82       	std	Y+1, r1	; 0x01
     5cc:	20 e3       	ldi	r18, 0x30	; 48
     5ce:	2a 83       	std	Y+2, r18	; 0x02
     5d0:	1b 82       	std	Y+3, r1	; 0x03
     5d2:	1c 82       	std	Y+4, r1	; 0x04
     5d4:	9e 01       	movw	r18, r28
     5d6:	2f 5f       	subi	r18, 0xFF	; 255
     5d8:	3f 4f       	sbci	r19, 0xFF	; 255
     5da:	41 e3       	ldi	r20, 0x31	; 49
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	0e 94 5f 02 	call	0x4be	; 0x4be <RF4463::setCommand(unsigned char, unsigned char, unsigned char*)>
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <RF4463::clrInterrupts()>:
_ZN6RF446313clrInterruptsEv():
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <RF4463::clrInterrupts()+0x6>
     5f6:	1f 92       	push	r1
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	19 82       	std	Y+1, r1	; 0x01
     5fe:	1a 82       	std	Y+2, r1	; 0x02
     600:	1b 82       	std	Y+3, r1	; 0x03
     602:	9e 01       	movw	r18, r28
     604:	2f 5f       	subi	r18, 0xFF	; 255
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	40 e2       	ldi	r20, 0x20	; 32
     60a:	63 e0       	ldi	r22, 0x03	; 3
     60c:	0e 94 5f 02 	call	0x4be	; 0x4be <RF4463::setCommand(unsigned char, unsigned char, unsigned char*)>
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <RF4463::fifoReset()>:
_ZN6RF44639fifoResetEv():
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	1f 92       	push	r1
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	23 e0       	ldi	r18, 0x03	; 3
     628:	29 83       	std	Y+1, r18	; 0x01
     62a:	9e 01       	movw	r18, r28
     62c:	2f 5f       	subi	r18, 0xFF	; 255
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	45 e1       	ldi	r20, 0x15	; 21
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	0e 94 5f 02 	call	0x4be	; 0x4be <RF4463::setCommand(unsigned char, unsigned char, unsigned char*)>
     638:	0f 90       	pop	r0
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <RF4463::writeTxFifo(unsigned char*, unsigned char)>:
_ZN6RF446311writeTxFifoEPhh():
     640:	8f 92       	push	r8
     642:	9f 92       	push	r9
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	1f 92       	push	r1
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	7c 01       	movw	r14, r24
     65e:	4b 01       	movw	r8, r22
     660:	49 83       	std	Y+1, r20	; 0x01
     662:	ad b6       	in	r10, 0x3d	; 61
     664:	be b6       	in	r11, 0x3e	; 62
     666:	9e 01       	movw	r18, r28
     668:	2f 5f       	subi	r18, 0xFF	; 255
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	62 e1       	ldi	r22, 0x12	; 18
     670:	72 e1       	ldi	r23, 0x12	; 18
     672:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
     676:	19 81       	ldd	r17, Y+1	; 0x01
     678:	41 2f       	mov	r20, r17
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	ca 01       	movw	r24, r20
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	2d b7       	in	r18, 0x3d	; 61
     682:	3e b7       	in	r19, 0x3e	; 62
     684:	28 1b       	sub	r18, r24
     686:	39 0b       	sbc	r19, r25
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	3e bf       	out	0x3e, r19	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	2d bf       	out	0x3d, r18	; 61
     692:	8d b7       	in	r24, 0x3d	; 61
     694:	9e b7       	in	r25, 0x3e	; 62
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	6c 01       	movw	r12, r24
     69a:	ed b7       	in	r30, 0x3d	; 61
     69c:	fe b7       	in	r31, 0x3e	; 62
     69e:	11 83       	std	Z+1, r17	; 0x01
     6a0:	b4 01       	movw	r22, r8
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <memcpy>
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	61 0f       	add	r22, r17
     6ac:	96 01       	movw	r18, r12
     6ae:	46 e6       	ldi	r20, 0x66	; 102
     6b0:	c7 01       	movw	r24, r14
     6b2:	0e 94 5f 02 	call	0x4be	; 0x4be <RF4463::setCommand(unsigned char, unsigned char, unsigned char*)>
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	be be       	out	0x3e, r11	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	ad be       	out	0x3d, r10	; 61
     6c0:	0f 90       	pop	r0
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	bf 90       	pop	r11
     6d2:	af 90       	pop	r10
     6d4:	9f 90       	pop	r9
     6d6:	8f 90       	pop	r8
     6d8:	08 95       	ret

000006da <RF4463::spiReadBuf(unsigned char, unsigned char*)>:
_ZN6RF446310spiReadBufEhPh():
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	c6 2f       	mov	r28, r22
     6e2:	8a 01       	movw	r16, r20
     6e4:	c1 50       	subi	r28, 0x01	; 1
     6e6:	38 f0       	brcs	.+14     	; 0x6f6 <RF4463::spiReadBuf(unsigned char, unsigned char*)+0x1c>
_ZN6RF44637spiByteEh():
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SPIClass::transfer(unsigned char)>
_ZN6RF446310spiReadBufEhPh():
     6ee:	f8 01       	movw	r30, r16
     6f0:	81 93       	st	Z+, r24
     6f2:	8f 01       	movw	r16, r30
     6f4:	f7 cf       	rjmp	.-18     	; 0x6e4 <RF4463::spiReadBuf(unsigned char, unsigned char*)+0xa>
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <RF4463::getCommand(unsigned char, unsigned char, unsigned char*)>:
_ZN6RF446310getCommandEhhPh():
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:375
	digitalWrite(_nSELPin, HIGH);

	return true;
}
bool RF4463::getCommand(uint8_t length,uint8_t command,uint8_t* paraBuf)
{
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ec 01       	movw	r28, r24
     70e:	06 2f       	mov	r16, r22
     710:	d4 2e       	mov	r13, r20
     712:	79 01       	movw	r14, r18
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:376
	if(!checkCTS())
     714:	0e 94 29 01 	call	0x252	; 0x252 <RF4463::checkCTS()>
     718:	88 23       	and	r24, r24
     71a:	49 f1       	breq	.+82     	; 0x76e <RF4463::getCommand(unsigned char, unsigned char, unsigned char*)+0x70>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:379
		return false;

	digitalWrite(_nSELPin, LOW);
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
_ZN6RF44637spiByteEh():
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:465
		*readBuf++=spiByte(0);
}
uint8_t RF4463::spiByte(uint8_t writeData)
{
	uint8_t readData;
	readData=SPI.transfer(writeData);
     724:	8d 2d       	mov	r24, r13
     726:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SPIClass::transfer(unsigned char)>
_ZN6RF446310getCommandEhhPh():
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:381
	if(!checkCTS())
		return false;

	digitalWrite(_nSELPin, LOW);
	spiByte(command);				// set command to read 
	digitalWrite(_nSELPin, HIGH);
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	8a 81       	ldd	r24, Y+2	; 0x02
     72e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:383
	
	if(!checkCTS())					// check if RF4463 is ready
     732:	ce 01       	movw	r24, r28
     734:	0e 94 29 01 	call	0x252	; 0x252 <RF4463::checkCTS()>
     738:	88 23       	and	r24, r24
     73a:	c9 f0       	breq	.+50     	; 0x76e <RF4463::getCommand(unsigned char, unsigned char, unsigned char*)+0x70>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:386
		return false;

	digitalWrite(_nSELPin, LOW);
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
_ZN6RF44637spiByteEh():
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:465
		*readBuf++=spiByte(0);
}
uint8_t RF4463::spiByte(uint8_t writeData)
{
	uint8_t readData;
	readData=SPI.transfer(writeData);
     744:	84 e4       	ldi	r24, 0x44	; 68
     746:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SPIClass::transfer(unsigned char)>
_ZN6RF446310getCommandEhhPh():
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:388
	if(!checkCTS())					// check if RF4463 is ready
		return false;

	digitalWrite(_nSELPin, LOW);
	spiByte(RF4463_CMD_READ_BUF);	// turn to read command mode
	spiReadBuf(length,paraBuf);		// read parameters
     74a:	a7 01       	movw	r20, r14
     74c:	60 2f       	mov	r22, r16
     74e:	ce 01       	movw	r24, r28
     750:	0e 94 6d 03 	call	0x6da	; 0x6da <RF4463::spiReadBuf(unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:389
	digitalWrite(_nSELPin, HIGH);
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:390
}
     75c:	81 2f       	mov	r24, r17
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	08 95       	ret
     76e:	10 e0       	ldi	r17, 0x00	; 0
     770:	f5 cf       	rjmp	.-22     	; 0x75c <RF4463::getCommand(unsigned char, unsigned char, unsigned char*)+0x5e>

00000772 <RF4463::checkDevice()>:
_ZN6RF446311checkDeviceEv():
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:178
		setCommand(cmdLen,command,buf);
		pos=pos+cmdLen;
	}
}
bool RF4463::checkDevice()
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	29 97       	sbiw	r28, 0x09	; 9
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:181
	uint8_t buf[9];
	uint16_t partInfo;
	getCommand(9,RF4463_CMD_PART_INFO,buf);		// read part info to check if 4463 works
     786:	9e 01       	movw	r18, r28
     788:	2f 5f       	subi	r18, 0xFF	; 255
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
     78c:	41 e0       	ldi	r20, 0x01	; 1
     78e:	69 e0       	ldi	r22, 0x09	; 9
     790:	0e 94 7f 03 	call	0x6fe	; 0x6fe <RF4463::getCommand(unsigned char, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:201
    Serial.print(partInfo, HEX);
    Serial.println("\n");

  #endif

	if(partInfo != 0x4463){
     794:	2b 81       	ldd	r18, Y+3	; 0x03
     796:	3c 81       	ldd	r19, Y+4	; 0x04
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	24 34       	cpi	r18, 0x44	; 68
     79c:	33 46       	sbci	r19, 0x63	; 99
     79e:	09 f0       	breq	.+2      	; 0x7a2 <RF4463::checkDevice()+0x30>
     7a0:	80 e0       	ldi	r24, 0x00	; 0
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:206
		return false;
	}

  return true;
}
     7a2:	29 96       	adiw	r28, 0x09	; 9
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <RF4463::init()>:
_ZN6RF44634initEv():
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:38
	pinMode(_sdnPin, OUTPUT);
	digitalWrite(_sdnPin, HIGH);
	pinMode(_nIRQPin, INPUT);
}
bool RF4463::init()
{
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	64 97       	sbiw	r28, 0x14	; 20
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	8c 01       	movw	r16, r24
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:39
	pinInit();
     7d2:	0e 94 0e 01 	call	0x21c	; 0x21c <RF4463::pinInit()>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:40
	spiInit();
     7d6:	c8 01       	movw	r24, r16
     7d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <RF4463::spiInit()>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:45

	uint8_t buf[20];

	// reset RF4463
	powerOnReset();
     7dc:	c8 01       	movw	r24, r16
     7de:	0e 94 60 01 	call	0x2c0	; 0x2c0 <RF4463::powerOnReset()>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:49


  	// check if RF4463 works
	if(!checkDevice())
     7e2:	c8 01       	movw	r24, r16
     7e4:	0e 94 b9 03 	call	0x772	; 0x772 <RF4463::checkDevice()>
     7e8:	f8 2e       	mov	r15, r24
     7ea:	88 23       	and	r24, r24
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <RF4463::init()+0x3c>
     7ee:	a2 c0       	rjmp	.+324    	; 0x934 <__stack+0x35>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:56
		return false;
	}


	// Set RF parameter,like frequency,data rate etc
	setConfig(RF4463_CONFIGURATION_DATA,sizeof(RF4463_CONFIGURATION_DATA));
     7f0:	4e e6       	ldi	r20, 0x6E	; 110
     7f2:	51 e0       	ldi	r21, 0x01	; 1
     7f4:	6d e5       	ldi	r22, 0x5D	; 93
     7f6:	71 e0       	ldi	r23, 0x01	; 1
     7f8:	c8 01       	movw	r24, r16
     7fa:	0e 94 88 02 	call	0x510	; 0x510 <RF4463::setConfig(unsigned char const*, unsigned int)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:60
	
	// set antenna switch,in RF4463 is GPIO2 and GPIO3
	// don't change setting of GPIO2,GPIO3,NIRQ,SDO
	buf[0]  = RF4463_GPIO_NO_CHANGE; 
     7fe:	19 82       	std	Y+1, r1	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:61
	buf[1]  = RF4463_GPIO_NO_CHANGE;
     800:	1a 82       	std	Y+2, r1	; 0x02
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:62
	buf[2]  = RF4463_GPIO_RX_STATE;
     802:	81 e2       	ldi	r24, 0x21	; 33
     804:	8b 83       	std	Y+3, r24	; 0x03
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:63
	buf[3]  = RF4463_GPIO_TX_STATE;
     806:	80 e2       	ldi	r24, 0x20	; 32
     808:	8c 83       	std	Y+4, r24	; 0x04
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:64
	buf[4]  = RF4463_NIRQ_INTERRUPT_SIGNAL; 
     80a:	87 e2       	ldi	r24, 0x27	; 39
     80c:	8d 83       	std	Y+5, r24	; 0x05
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:65
	buf[5]  = RF4463_GPIO_SPI_DATA_OUT; 
     80e:	8b e0       	ldi	r24, 0x0B	; 11
     810:	8e 83       	std	Y+6, r24	; 0x06
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:66
	setCommand(6,RF4463_CMD_GPIO_PIN_CFG,buf);
     812:	9e 01       	movw	r18, r28
     814:	2f 5f       	subi	r18, 0xFF	; 255
     816:	3f 4f       	sbci	r19, 0xFF	; 255
     818:	43 e1       	ldi	r20, 0x13	; 19
     81a:	66 e0       	ldi	r22, 0x06	; 6
     81c:	c8 01       	movw	r24, r16
     81e:	0e 94 5f 02 	call	0x4be	; 0x4be <RF4463::setCommand(unsigned char, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:70
	
	// frequency adjust
	// frequency will inaccurate if change this parameter
	buf[0]  = 98;
     822:	82 e6       	ldi	r24, 0x62	; 98
     824:	89 83       	std	Y+1, r24	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:71
	setProperties(RF4463_PROPERTY_GLOBAL_XO_TUNE,1,buf);
     826:	9e 01       	movw	r18, r28
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	c8 01       	movw	r24, r16
     834:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:74

	// tx = rx = 64 byte,PH mode ,high performance mode
	buf[0] = 0x40;
     838:	80 e4       	ldi	r24, 0x40	; 64
     83a:	89 83       	std	Y+1, r24	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:75
	setProperties(RF4463_PROPERTY_GLOBAL_CONFIG,1,buf);
     83c:	9e 01       	movw	r18, r28
     83e:	2f 5f       	subi	r18, 0xFF	; 255
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	c8 01       	movw	r24, r16
     84a:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:78

	// set preamble
	buf[0]  = 0x08;		//  8 bytes Preamble			
     84e:	88 e0       	ldi	r24, 0x08	; 8
     850:	89 83       	std	Y+1, r24	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:79
	buf[1]  = 0x14;		//  detect 20 bits
     852:	84 e1       	ldi	r24, 0x14	; 20
     854:	8a 83       	std	Y+2, r24	; 0x02
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:80
	buf[2]  = 0x00;						
     856:	1b 82       	std	Y+3, r1	; 0x03
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:81
	buf[3]  = 0x0f;
     858:	8f e0       	ldi	r24, 0x0F	; 15
     85a:	8c 83       	std	Y+4, r24	; 0x04
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:82
	buf[4]  = RF4463_PREAMBLE_FIRST_1|RF4463_PREAMBLE_LENGTH_BYTES|RF4463_PREAMBLE_STANDARD_1010;
     85c:	81 e3       	ldi	r24, 0x31	; 49
     85e:	8d 83       	std	Y+5, r24	; 0x05
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:83
	buf[5]  = 0x00;
     860:	1e 82       	std	Y+6, r1	; 0x06
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:84
	buf[6]  = 0x00;
     862:	1f 82       	std	Y+7, r1	; 0x07
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:85
	buf[7]  = 0x00;
     864:	18 86       	std	Y+8, r1	; 0x08
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:86
	buf[8]  = 0x00;
     866:	19 86       	std	Y+9, r1	; 0x09
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:87
	setProperties(RF4463_PROPERTY_PREAMBLE_TX_LENGTH,9,buf);
     868:	9e 01       	movw	r18, r28
     86a:	2f 5f       	subi	r18, 0xFF	; 255
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	49 e0       	ldi	r20, 0x09	; 9
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	70 e1       	ldi	r23, 0x10	; 16
     874:	c8 01       	movw	r24, r16
     876:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:90

	// set sync words
	buf[0] = 0x2d;
     87a:	8d e2       	ldi	r24, 0x2D	; 45
     87c:	89 83       	std	Y+1, r24	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:91
	buf[1] = 0xd4;
     87e:	84 ed       	ldi	r24, 0xD4	; 212
     880:	8a 83       	std	Y+2, r24	; 0x02
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:92
	setSyncWords(buf,2);
     882:	42 e0       	ldi	r20, 0x02	; 2
     884:	be 01       	movw	r22, r28
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	c8 01       	movw	r24, r16
     88c:	0e 94 0c 02 	call	0x418	; 0x418 <RF4463::setSyncWords(unsigned char*, unsigned char)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:95
   
    // set CRC
	buf[0] = RF4463_CRC_SEED_ALL_1S|RF4463_CRC_ITU_T ;			
     890:	81 e8       	ldi	r24, 0x81	; 129
     892:	89 83       	std	Y+1, r24	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:96
	setProperties(RF4463_PROPERTY_PKT_CRC_CONFIG,1,buf);
     894:	9e 01       	movw	r18, r28
     896:	2f 5f       	subi	r18, 0xFF	; 255
     898:	3f 4f       	sbci	r19, 0xFF	; 255
     89a:	41 e0       	ldi	r20, 0x01	; 1
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	72 e1       	ldi	r23, 0x12	; 18
     8a0:	c8 01       	movw	r24, r16
     8a2:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:98
	
	buf[0]=RF4463_CRC_ENDIAN;
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	89 83       	std	Y+1, r24	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:99
	setProperties(RF4463_PROPERTY_PKT_CONFIG1,1,buf);
     8aa:	9e 01       	movw	r18, r28
     8ac:	2f 5f       	subi	r18, 0xFF	; 255
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	41 e0       	ldi	r20, 0x01	; 1
     8b2:	66 e0       	ldi	r22, 0x06	; 6
     8b4:	72 e1       	ldi	r23, 0x12	; 18
     8b6:	c8 01       	movw	r24, r16
     8b8:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:101

	buf[0]=RF4463_IN_FIFO|RF4463_DST_FIELD_ENUM_2;
     8bc:	8a e0       	ldi	r24, 0x0A	; 10
     8be:	89 83       	std	Y+1, r24	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:102
	buf[1]=RF4463_SRC_FIELD_ENUM_1;
     8c0:	ee 24       	eor	r14, r14
     8c2:	e3 94       	inc	r14
     8c4:	ea 82       	std	Y+2, r14	; 0x02
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:103
	buf[2]=0x00;
     8c6:	1b 82       	std	Y+3, r1	; 0x03
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:104
	setProperties(RF4463_PROPERTY_PKT_LEN,3,buf);
     8c8:	9e 01       	movw	r18, r28
     8ca:	2f 5f       	subi	r18, 0xFF	; 255
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	43 e0       	ldi	r20, 0x03	; 3
     8d0:	68 e0       	ldi	r22, 0x08	; 8
     8d2:	72 e1       	ldi	r23, 0x12	; 18
     8d4:	c8 01       	movw	r24, r16
     8d6:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:109
	
	// set length of Field 1 -- 4
	// variable len,field as length field,field 2 as data field
	// didn't use field 3 -- 4
	buf[0] = 0x00;
     8da:	19 82       	std	Y+1, r1	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:110
	buf[1] = 0x01;
     8dc:	ea 82       	std	Y+2, r14	; 0x02
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:111
	buf[2] = RF4463_FIELD_CONFIG_PN_START;
     8de:	94 e0       	ldi	r25, 0x04	; 4
     8e0:	9b 83       	std	Y+3, r25	; 0x03
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:112
	buf[3] = RF4463_FIELD_CONFIG_CRC_START|RF4463_FIELD_CONFIG_SEND_CRC|RF4463_FIELD_CONFIG_CHECK_CRC|RF4463_FIELD_CONFIG_CRC_ENABLE;
     8e2:	8a ea       	ldi	r24, 0xAA	; 170
     8e4:	8c 83       	std	Y+4, r24	; 0x04
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:113
	buf[4] = 0x00;
     8e6:	1d 82       	std	Y+5, r1	; 0x05
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:114
	buf[5] = 50;
     8e8:	22 e3       	ldi	r18, 0x32	; 50
     8ea:	2e 83       	std	Y+6, r18	; 0x06
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:115
	buf[6] = RF4463_FIELD_CONFIG_PN_START;
     8ec:	9f 83       	std	Y+7, r25	; 0x07
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:116
	buf[7] = RF4463_FIELD_CONFIG_CRC_START|RF4463_FIELD_CONFIG_SEND_CRC|RF4463_FIELD_CONFIG_CHECK_CRC|RF4463_FIELD_CONFIG_CRC_ENABLE;;
     8ee:	88 87       	std	Y+8, r24	; 0x08
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:117
	buf[8]  = 0x00; 
     8f0:	19 86       	std	Y+9, r1	; 0x09
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:118
	buf[9] = 0x00;
     8f2:	1a 86       	std	Y+10, r1	; 0x0a
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:119
	buf[10] = 0x00;
     8f4:	1b 86       	std	Y+11, r1	; 0x0b
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:120
	buf[11] = 0x00;
     8f6:	1c 86       	std	Y+12, r1	; 0x0c
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:121
	setProperties(RF4463_PROPERTY_PKT_FIELD_1_LENGTH_12_8 ,12,buf);
     8f8:	9e 01       	movw	r18, r28
     8fa:	2f 5f       	subi	r18, 0xFF	; 255
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	4c e0       	ldi	r20, 0x0C	; 12
     900:	6d e0       	ldi	r22, 0x0D	; 13
     902:	72 e1       	ldi	r23, 0x12	; 18
     904:	c8 01       	movw	r24, r16
     906:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:123
  
	buf[0] = 0x00;
     90a:	19 82       	std	Y+1, r1	; 0x01
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:124
	buf[1] = 0x00;
     90c:	1a 82       	std	Y+2, r1	; 0x02
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:125
	buf[2] = 0x00;
     90e:	1b 82       	std	Y+3, r1	; 0x03
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:126
	buf[3] = 0x00;
     910:	1c 82       	std	Y+4, r1	; 0x04
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:127
	buf[4] = 0x00;
     912:	1d 82       	std	Y+5, r1	; 0x05
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:128
	buf[5] = 0x00;
     914:	1e 82       	std	Y+6, r1	; 0x06
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:129
	buf[6] = 0x00;
     916:	1f 82       	std	Y+7, r1	; 0x07
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:130
	buf[7] = 0x00;
     918:	18 86       	std	Y+8, r1	; 0x08
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:131
	setProperties(RF4463_PROPERTY_PKT_FIELD_4_LENGTH_12_8,8,buf);
     91a:	9e 01       	movw	r18, r28
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	48 e0       	ldi	r20, 0x08	; 8
     922:	69 e1       	ldi	r22, 0x19	; 25
     924:	72 e1       	ldi	r23, 0x12	; 18
     926:	c8 01       	movw	r24, r16
     928:	0e 94 ac 01 	call	0x358	; 0x358 <RF4463::setProperties(unsigned int, unsigned char, unsigned char*)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:134

	// set max tx power
  setTxPower(127);
     92c:	6f e7       	ldi	r22, 0x7F	; 127
     92e:	c8 01       	movw	r24, r16
     930:	0e 94 35 02 	call	0x46a	; 0x46a <RF4463::setTxPower(unsigned char)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:137

  return true;
}
     934:	8f 2d       	mov	r24, r15
     936:	64 96       	adiw	r28, 0x14	; 20
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	08 95       	ret

00000950 <RF4463::txPacket(unsigned char*, unsigned char)>:
_ZN6RF44638txPacketEPhh():
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:208
	}

  return true;
}
bool RF4463::txPacket(uint8_t* sendbuf,uint8_t sendLen)
{
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ec 01       	movw	r28, r24
     95c:	8b 01       	movw	r16, r22
     95e:	f4 2e       	mov	r15, r20
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:211
	uint16_t txTimer;

	fifoReset();		 				// clr fifo
     960:	0e 94 0e 03 	call	0x61c	; 0x61c <RF4463::fifoReset()>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:212
	writeTxFifo(sendbuf,sendLen);		// load data to fifo	
     964:	4f 2d       	mov	r20, r15
     966:	b8 01       	movw	r22, r16
     968:	ce 01       	movw	r24, r28
     96a:	0e 94 20 03 	call	0x640	; 0x640 <RF4463::writeTxFifo(unsigned char*, unsigned char)>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:213
	setTxInterrupt();
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 ef 01 	call	0x3de	; 0x3de <RF4463::setTxInterrupt()>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:214
	clrInterrupts();					// clr int factor	
     974:	ce 01       	movw	r24, r28
     976:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <RF4463::clrInterrupts()>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:215
	enterTxMode();						// enter TX mode
     97a:	ce 01       	movw	r24, r28
     97c:	0e 94 df 02 	call	0x5be	; 0x5be <RF4463::enterTxMode()>
     980:	05 ef       	ldi	r16, 0xF5	; 245
     982:	11 e0       	ldi	r17, 0x01	; 1
     984:	01 50       	subi	r16, 0x01	; 1
     986:	11 09       	sbc	r17, r1
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:220
	
	txTimer=RF4463_TX_TIMEOUT;
	while(txTimer--)
	{
		if(waitnIRQ())					// wait INT
     988:	ce 01       	movw	r24, r28
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:218
	setTxInterrupt();
	clrInterrupts();					// clr int factor	
	enterTxMode();						// enter TX mode
	
	txTimer=RF4463_TX_TIMEOUT;
	while(txTimer--)
     98a:	59 f0       	breq	.+22     	; 0x9a2 <RF4463::txPacket(unsigned char*, unsigned char)+0x52>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:220
	{
		if(waitnIRQ())					// wait INT
     98c:	0e 94 1f 01 	call	0x23e	; 0x23e <RF4463::waitnIRQ()>
     990:	81 11       	cpse	r24, r1
     992:	0a c0       	rjmp	.+20     	; 0x9a8 <RF4463::txPacket(unsigned char*, unsigned char)+0x58>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:224
		{
			return true;
		}
		delay(1);
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 04 0a 	call	0x1408	; 0x1408 <delay>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:218
	setTxInterrupt();
	clrInterrupts();					// clr int factor	
	enterTxMode();						// enter TX mode
	
	txTimer=RF4463_TX_TIMEOUT;
	while(txTimer--)
     9a0:	f1 cf       	rjmp	.-30     	; 0x984 <RF4463::txPacket(unsigned char*, unsigned char)+0x34>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:226
		{
			return true;
		}
		delay(1);
	}
	init();								// reset RF4463 if tx time out
     9a2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RF4463::init()>
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:228

	return false;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
/Users/kevinlutzer/Documents/Arduino/libraries/RF4463/RF4463.cpp:229
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	08 95       	ret

000009b4 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
     9b4:	cf 93       	push	r28
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
     9b6:	cf b7       	in	r28, 0x3f	; 63
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     9b8:	f8 94       	cli
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
     9ba:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <SPIClass::initialized>
     9be:	81 11       	cpse	r24, r1
     9c0:	27 c0       	rjmp	.+78     	; 0xa10 <SPIClass::begin()+0x5c>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     9c2:	e0 ea       	ldi	r30, 0xA0	; 160
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	84 91       	lpm	r24, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
     9c8:	e9 e8       	ldi	r30, 0x89	; 137
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	94 91       	lpm	r25, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
     9ce:	e8 2f       	mov	r30, r24
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	ef 53       	subi	r30, 0x3F	; 63
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	a5 91       	lpm	r26, Z+
     9dc:	b4 91       	lpm	r27, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     9de:	ec 91       	ld	r30, X
     9e0:	e9 23       	and	r30, r25
     9e2:	21 f4       	brne	.+8      	; 0x9ec <SPIClass::begin()+0x38>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	8a e0       	ldi	r24, 0x0A	; 10
     9e8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <digitalWrite>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	8a e0       	ldi	r24, 0x0A	; 10
     9f0:	0e 94 8e 0a 	call	0x151c	; 0x151c <pinMode>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     9f4:	8c b5       	in	r24, 0x2c	; 44
     9f6:	80 61       	ori	r24, 0x10	; 16
     9f8:	8c bd       	out	0x2c, r24	; 44
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
     9fa:	8c b5       	in	r24, 0x2c	; 44
     9fc:	80 64       	ori	r24, 0x40	; 64
     9fe:	8c bd       	out	0x2c, r24	; 44
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	8d e0       	ldi	r24, 0x0D	; 13
     a04:	0e 94 8e 0a 	call	0x151c	; 0x151c <pinMode>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	8b e0       	ldi	r24, 0x0B	; 11
     a0c:	0e 94 8e 0a 	call	0x151c	; 0x151c <pinMode>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
     a10:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <SPIClass::initialized>
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <SPIClass::initialized>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
     a1a:	cf bf       	out	0x3f, r28	; 63
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/SPI/src/SPI.cpp:64
}
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:378

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret

00000a26 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
     a26:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <TwoWire::rxBufferLength>
     a2a:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <TwoWire::rxBufferIndex>
     a2e:	89 1b       	sub	r24, r25
     a30:	99 0b       	sbc	r25, r25
     a32:	08 95       	ret

00000a34 <TwoWire::read()>:
_ZN7TwoWire4readEv():
     a34:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <TwoWire::rxBufferIndex>
     a38:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <TwoWire::rxBufferLength>
     a3c:	2f ef       	ldi	r18, 0xFF	; 255
     a3e:	3f ef       	ldi	r19, 0xFF	; 255
     a40:	98 17       	cp	r25, r24
     a42:	48 f4       	brcc	.+18     	; 0xa56 <TwoWire::read()+0x22>
     a44:	e9 2f       	mov	r30, r25
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	e8 5d       	subi	r30, 0xD8	; 216
     a4a:	fc 4f       	sbci	r31, 0xFC	; 252
     a4c:	20 81       	ld	r18, Z
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	9f 5f       	subi	r25, 0xFF	; 255
     a52:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <TwoWire::rxBufferIndex>
     a56:	c9 01       	movw	r24, r18
     a58:	08 95       	ret

00000a5a <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
     a5a:	e0 91 27 03 	lds	r30, 0x0327	; 0x800327 <TwoWire::rxBufferIndex>
     a5e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <TwoWire::rxBufferLength>
     a62:	e8 17       	cp	r30, r24
     a64:	30 f4       	brcc	.+12     	; 0xa72 <TwoWire::peek()+0x18>
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	e8 5d       	subi	r30, 0xD8	; 216
     a6a:	fc 4f       	sbci	r31, 0xFC	; 252
     a6c:	80 81       	ld	r24, Z
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	08 95       	ret
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	9f ef       	ldi	r25, 0xFF	; 255
     a76:	08 95       	ret

00000a78 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
     a78:	08 95       	ret

00000a7a <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	1f 92       	push	r1
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	69 83       	std	Y+1, r22	; 0x01
     a86:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <TwoWire::transmitting>
     a8a:	22 23       	and	r18, r18
     a8c:	f9 f0       	breq	.+62     	; 0xacc <TwoWire::write(unsigned char)+0x52>
     a8e:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <TwoWire::txBufferLength>
     a92:	20 32       	cpi	r18, 0x20	; 32
     a94:	58 f0       	brcs	.+22     	; 0xaac <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	fc 01       	movw	r30, r24
     a9c:	33 83       	std	Z+3, r19	; 0x03
     a9e:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0f 90       	pop	r0
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret
     aac:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <TwoWire::txBufferIndex>
     ab0:	e8 2f       	mov	r30, r24
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	ea 5f       	subi	r30, 0xFA	; 250
     ab6:	fc 4f       	sbci	r31, 0xFC	; 252
     ab8:	99 81       	ldd	r25, Y+1	; 0x01
     aba:	90 83       	st	Z, r25
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <TwoWire::txBufferIndex>
     ac2:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <TwoWire::txBufferLength>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	ec cf       	rjmp	.-40     	; 0xaa4 <TwoWire::write(unsigned char)+0x2a>
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	ce 01       	movw	r24, r28
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	0e 94 aa 05 	call	0xb54	; 0xb54 <twi_transmit>
     ad6:	f7 cf       	rjmp	.-18     	; 0xac6 <TwoWire::write(unsigned char)+0x4c>

00000ad8 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	7c 01       	movw	r14, r24
     aea:	cb 01       	movw	r24, r22
     aec:	8a 01       	movw	r16, r20
     aee:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <TwoWire::transmitting>
     af2:	22 23       	and	r18, r18
     af4:	89 f0       	breq	.+34     	; 0xb18 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     af6:	eb 01       	movw	r28, r22
     af8:	6b 01       	movw	r12, r22
     afa:	c4 0e       	add	r12, r20
     afc:	d5 1e       	adc	r13, r21
     afe:	cc 15       	cp	r28, r12
     b00:	dd 05       	cpc	r29, r13
     b02:	69 f0       	breq	.+26     	; 0xb1e <TwoWire::write(unsigned char const*, unsigned int)+0x46>
     b04:	69 91       	ld	r22, Y+
     b06:	d7 01       	movw	r26, r14
     b08:	ed 91       	ld	r30, X+
     b0a:	fc 91       	ld	r31, X
     b0c:	01 90       	ld	r0, Z+
     b0e:	f0 81       	ld	r31, Z
     b10:	e0 2d       	mov	r30, r0
     b12:	c7 01       	movw	r24, r14
     b14:	09 95       	icall
     b16:	f3 cf       	rjmp	.-26     	; 0xafe <TwoWire::write(unsigned char const*, unsigned int)+0x26>
     b18:	64 2f       	mov	r22, r20
     b1a:	0e 94 aa 05 	call	0xb54	; 0xb54 <twi_transmit>
     b1e:	c8 01       	movw	r24, r16
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	08 95       	ret

00000b32 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b32:	e7 ef       	ldi	r30, 0xF7	; 247
     b34:	f2 e0       	ldi	r31, 0x02	; 2
     b36:	13 82       	std	Z+3, r1	; 0x03
     b38:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b3a:	88 ee       	ldi	r24, 0xE8	; 232
     b3c:	93 e0       	ldi	r25, 0x03	; 3
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	84 83       	std	Z+4, r24	; 0x04
     b44:	95 83       	std	Z+5, r25	; 0x05
     b46:	a6 83       	std	Z+6, r26	; 0x06
     b48:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:53
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     b4a:	8f ec       	ldi	r24, 0xCF	; 207
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	91 83       	std	Z+1, r25	; 0x01
     b50:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:382
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     b52:	08 95       	ret

00000b54 <twi_transmit>:
twi_transmit():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:531
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
     b54:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <twi_txBufferLength>
     b58:	26 0f       	add	r18, r22
     b5a:	33 27       	eor	r19, r19
     b5c:	33 1f       	adc	r19, r19
     b5e:	21 32       	cpi	r18, 0x21	; 33
     b60:	31 05       	cpc	r19, r1
     b62:	ec f4       	brge	.+58     	; 0xb9e <twi_transmit+0x4a>
     b64:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <twi_state>
     b68:	fc 01       	movw	r30, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	24 30       	cpi	r18, 0x04	; 4
     b70:	69 f0       	breq	.+26     	; 0xb8c <twi_transmit+0x38>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	08 95       	ret
     b76:	a0 91 6a 03 	lds	r26, 0x036A	; 0x80036a <twi_txBufferLength>
     b7a:	21 91       	ld	r18, Z+
     b7c:	ac 01       	movw	r20, r24
     b7e:	44 59       	subi	r20, 0x94	; 148
     b80:	5c 4f       	sbci	r21, 0xFC	; 252
     b82:	a4 0f       	add	r26, r20
     b84:	b5 2f       	mov	r27, r21
     b86:	b1 1d       	adc	r27, r1
     b88:	2c 93       	st	X, r18
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	86 17       	cp	r24, r22
     b8e:	98 f3       	brcs	.-26     	; 0xb76 <twi_transmit+0x22>
     b90:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <twi_txBufferLength>
     b94:	68 0f       	add	r22, r24
     b96:	60 93 6a 03 	sts	0x036A, r22	; 0x80036a <twi_txBufferLength>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	08 95       	ret
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	08 95       	ret

00000ba2 <twi_stop>:
twi_stop():
     ba2:	85 ed       	ldi	r24, 0xD5	; 213
     ba4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     ba8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     bac:	84 fd       	sbrc	r24, 4
     bae:	fc cf       	rjmp	.-8      	; 0xba8 <twi_stop+0x6>
     bb0:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <twi_state>
     bb4:	08 95       	ret

00000bb6 <twi_releaseBus>:
twi_releaseBus():
     bb6:	85 ec       	ldi	r24, 0xC5	; 197
     bb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     bbc:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <twi_state>
     bc0:	08 95       	ret

00000bc2 <__vector_24>:
__vector_24():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:534

ISR(TWI_vect)
{
     bc2:	1f 92       	push	r1
     bc4:	0f 92       	push	r0
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	0f 92       	push	r0
     bca:	11 24       	eor	r1, r1
     bcc:	2f 93       	push	r18
     bce:	3f 93       	push	r19
     bd0:	4f 93       	push	r20
     bd2:	5f 93       	push	r21
     bd4:	6f 93       	push	r22
     bd6:	7f 93       	push	r23
     bd8:	8f 93       	push	r24
     bda:	9f 93       	push	r25
     bdc:	af 93       	push	r26
     bde:	bf 93       	push	r27
     be0:	ef 93       	push	r30
     be2:	ff 93       	push	r31
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
     be4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     be8:	88 7f       	andi	r24, 0xF8	; 248
     bea:	80 36       	cpi	r24, 0x60	; 96
     bec:	09 f4       	brne	.+2      	; 0xbf0 <__vector_24+0x2e>
     bee:	4c c0       	rjmp	.+152    	; 0xc88 <__vector_24+0xc6>
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <__vector_24+0x32>
     bf2:	3f c0       	rjmp	.+126    	; 0xc72 <__vector_24+0xb0>
     bf4:	88 32       	cpi	r24, 0x28	; 40
     bf6:	09 f4       	brne	.+2      	; 0xbfa <__vector_24+0x38>
     bf8:	a8 c0       	rjmp	.+336    	; 0xd4a <__vector_24+0x188>
     bfa:	18 f5       	brcc	.+70     	; 0xc42 <__vector_24+0x80>
     bfc:	80 31       	cpi	r24, 0x10	; 16
     bfe:	09 f4       	brne	.+2      	; 0xc02 <__vector_24+0x40>
     c00:	9c c0       	rjmp	.+312    	; 0xd3a <__vector_24+0x178>
     c02:	b8 f4       	brcc	.+46     	; 0xc32 <__vector_24+0x70>
     c04:	88 23       	and	r24, r24
     c06:	09 f4       	brne	.+2      	; 0xc0a <__vector_24+0x48>
     c08:	05 c1       	rjmp	.+522    	; 0xe14 <__vector_24+0x252>
     c0a:	88 30       	cpi	r24, 0x08	; 8
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__vector_24+0x4e>
     c0e:	95 c0       	rjmp	.+298    	; 0xd3a <__vector_24+0x178>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     c32:	88 31       	cpi	r24, 0x18	; 24
     c34:	09 f4       	brne	.+2      	; 0xc38 <__vector_24+0x76>
     c36:	89 c0       	rjmp	.+274    	; 0xd4a <__vector_24+0x188>
     c38:	80 32       	cpi	r24, 0x20	; 32
     c3a:	51 f7       	brne	.-44     	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     c3c:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <twi_error>
     c40:	15 c0       	rjmp	.+42     	; 0xc6c <__vector_24+0xaa>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     c42:	80 34       	cpi	r24, 0x40	; 64
     c44:	09 f4       	brne	.+2      	; 0xc48 <__vector_24+0x86>
     c46:	a6 c0       	rjmp	.+332    	; 0xd94 <__vector_24+0x1d2>
     c48:	48 f4       	brcc	.+18     	; 0xc5c <__vector_24+0x9a>
     c4a:	80 33       	cpi	r24, 0x30	; 48
     c4c:	b9 f3       	breq	.-18     	; 0xc3c <__vector_24+0x7a>
     c4e:	88 33       	cpi	r24, 0x38	; 56
     c50:	f9 f6       	brne	.-66     	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     c52:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <twi_error>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:575
      twi_releaseBus();
     c56:	0e 94 db 05 	call	0xbb6	; 0xbb6 <twi_releaseBus>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:576
      break;
     c5a:	da cf       	rjmp	.-76     	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     c5c:	80 35       	cpi	r24, 0x50	; 80
     c5e:	09 f4       	brne	.+2      	; 0xc62 <__vector_24+0xa0>
     c60:	89 c0       	rjmp	.+274    	; 0xd74 <__vector_24+0x1b2>
     c62:	88 35       	cpi	r24, 0x58	; 88
     c64:	09 f4       	brne	.+2      	; 0xc68 <__vector_24+0xa6>
     c66:	9e c0       	rjmp	.+316    	; 0xda4 <__vector_24+0x1e2>
     c68:	88 34       	cpi	r24, 0x48	; 72
     c6a:	91 f6       	brne	.-92     	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
     c6c:	0e 94 d1 05 	call	0xba2	; 0xba2 <twi_stop>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:696
      break;
  }
}
     c70:	cf cf       	rjmp	.-98     	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     c72:	88 39       	cpi	r24, 0x98	; 152
     c74:	09 f4       	brne	.+2      	; 0xc78 <__vector_24+0xb6>
     c76:	94 c0       	rjmp	.+296    	; 0xda0 <__vector_24+0x1de>
     c78:	38 f5       	brcc	.+78     	; 0xcc8 <__vector_24+0x106>
     c7a:	88 37       	cpi	r24, 0x78	; 120
     c7c:	29 f0       	breq	.+10     	; 0xc88 <__vector_24+0xc6>
     c7e:	50 f4       	brcc	.+20     	; 0xc94 <__vector_24+0xd2>
     c80:	88 36       	cpi	r24, 0x68	; 104
     c82:	11 f0       	breq	.+4      	; 0xc88 <__vector_24+0xc6>
     c84:	80 37       	cpi	r24, 0x70	; 112
     c86:	21 f6       	brne	.-120    	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <twi_state>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     c8e:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <twi_rxBufferIndex>
     c92:	57 c0       	rjmp	.+174    	; 0xd42 <__vector_24+0x180>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     c94:	88 38       	cpi	r24, 0x88	; 136
     c96:	09 f4       	brne	.+2      	; 0xc9a <__vector_24+0xd8>
     c98:	83 c0       	rjmp	.+262    	; 0xda0 <__vector_24+0x1de>
     c9a:	80 39       	cpi	r24, 0x90	; 144
     c9c:	19 f0       	breq	.+6      	; 0xca4 <__vector_24+0xe2>
     c9e:	80 38       	cpi	r24, 0x80	; 128
     ca0:	09 f0       	breq	.+2      	; 0xca4 <__vector_24+0xe2>
     ca2:	b6 cf       	rjmp	.-148    	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     ca4:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <twi_rxBufferIndex>
     ca8:	80 32       	cpi	r24, 0x20	; 32
     caa:	08 f0       	brcs	.+2      	; 0xcae <__vector_24+0xec>
     cac:	79 c0       	rjmp	.+242    	; 0xda0 <__vector_24+0x1de>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     cae:	e0 91 49 03 	lds	r30, 0x0349	; 0x800349 <twi_rxBufferIndex>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8e 0f       	add	r24, r30
     cb6:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <twi_rxBufferIndex>
     cba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	e6 5b       	subi	r30, 0xB6	; 182
     cc2:	fc 4f       	sbci	r31, 0xFC	; 252
     cc4:	80 83       	st	Z, r24
     cc6:	3d c0       	rjmp	.+122    	; 0xd42 <__vector_24+0x180>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     cc8:	80 3b       	cpi	r24, 0xB0	; 176
     cca:	39 f0       	breq	.+14     	; 0xcda <__vector_24+0x118>
     ccc:	e0 f4       	brcc	.+56     	; 0xd06 <__vector_24+0x144>
     cce:	80 3a       	cpi	r24, 0xA0	; 160
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <__vector_24+0x112>
     cd2:	85 c0       	rjmp	.+266    	; 0xdde <__vector_24+0x21c>
     cd4:	88 3a       	cpi	r24, 0xA8	; 168
     cd6:	09 f0       	breq	.+2      	; 0xcda <__vector_24+0x118>
     cd8:	9b cf       	rjmp	.-202    	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <twi_state>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     ce0:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <twi_txBufferIndex>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     ce4:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_txBufferLength>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     ce8:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <twi_onSlaveTransmit>
     cec:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <twi_onSlaveTransmit+0x1>
     cf0:	09 95       	icall
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     cf2:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <twi_txBufferLength>
     cf6:	81 11       	cpse	r24, r1
     cf8:	0f c0       	rjmp	.+30     	; 0xd18 <__vector_24+0x156>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <twi_txBufferLength>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
     d00:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <twi_txBuffer>
     d04:	09 c0       	rjmp	.+18     	; 0xd18 <__vector_24+0x156>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     d06:	80 3c       	cpi	r24, 0xC0	; 192
     d08:	09 f4       	brne	.+2      	; 0xd0c <__vector_24+0x14a>
     d0a:	82 c0       	rjmp	.+260    	; 0xe10 <__vector_24+0x24e>
     d0c:	88 3c       	cpi	r24, 0xC8	; 200
     d0e:	09 f4       	brne	.+2      	; 0xd12 <__vector_24+0x150>
     d10:	7f c0       	rjmp	.+254    	; 0xe10 <__vector_24+0x24e>
     d12:	88 3b       	cpi	r24, 0xB8	; 184
     d14:	09 f0       	breq	.+2      	; 0xd18 <__vector_24+0x156>
     d16:	7c cf       	rjmp	.-264    	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     d18:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <twi_txBufferIndex>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	8e 0f       	add	r24, r30
     d20:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <twi_txBufferIndex>
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	e4 59       	subi	r30, 0x94	; 148
     d28:	fc 4f       	sbci	r31, 0xFC	; 252
     d2a:	80 81       	ld	r24, Z
     d2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     d30:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <twi_txBufferIndex>
     d34:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <twi_txBufferLength>
     d38:	31 c0       	rjmp	.+98     	; 0xd9c <__vector_24+0x1da>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     d3a:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <twi_slarw>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     d3e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     d42:	85 ec       	ldi	r24, 0xC5	; 197
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     d44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     d48:	63 cf       	rjmp	.-314    	; 0xc10 <__vector_24+0x4e>
__vector_24():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
     d4a:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <twi_masterBufferIndex>
     d4e:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_masterBufferLength>
     d52:	98 17       	cp	r25, r24
     d54:	b8 f5       	brcc	.+110    	; 0xdc4 <__vector_24+0x202>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     d56:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_masterBuffer>
     d5a:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <twi_masterBuffer+0x1>
     d5e:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <twi_masterBufferIndex>
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	2e 0f       	add	r18, r30
     d66:	20 93 8d 03 	sts	0x038D, r18	; 0x80038d <twi_masterBufferIndex>
     d6a:	e8 0f       	add	r30, r24
     d6c:	f9 2f       	mov	r31, r25
     d6e:	f1 1d       	adc	r31, r1
     d70:	80 81       	ld	r24, Z
     d72:	e5 cf       	rjmp	.-54     	; 0xd3e <__vector_24+0x17c>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     d74:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <twi_masterBuffer>
     d78:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <twi_masterBuffer+0x1>
     d7c:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <twi_masterBufferIndex>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	8e 0f       	add	r24, r30
     d84:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <twi_masterBufferIndex>
     d88:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     d8c:	e2 0f       	add	r30, r18
     d8e:	f3 2f       	mov	r31, r19
     d90:	f1 1d       	adc	r31, r1
     d92:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     d94:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <twi_masterBufferIndex>
     d98:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_masterBufferLength>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     d9c:	98 17       	cp	r25, r24
     d9e:	88 f2       	brcs	.-94     	; 0xd42 <__vector_24+0x180>
twi_reply():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     da0:	85 e8       	ldi	r24, 0x85	; 133
     da2:	d0 cf       	rjmp	.-96     	; 0xd44 <__vector_24+0x182>
__vector_24():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     da4:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <twi_masterBuffer>
     da8:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <twi_masterBuffer+0x1>
     dac:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <twi_masterBufferIndex>
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	8e 0f       	add	r24, r30
     db4:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <twi_masterBufferIndex>
     db8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     dbc:	e2 0f       	add	r30, r18
     dbe:	f3 2f       	mov	r31, r19
     dc0:	f1 1d       	adc	r31, r1
     dc2:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
     dc4:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <twi_sendStop>
     dc8:	81 11       	cpse	r24, r1
     dca:	50 cf       	rjmp	.-352    	; 0xc6c <__vector_24+0xaa>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_inRepStart>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     dd2:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     dd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     dd8:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <twi_state>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:686
      break;
     ddc:	19 cf       	rjmp	.-462    	; 0xc10 <__vector_24+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:635
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     dde:	0e 94 db 05 	call	0xbb6	; 0xbb6 <twi_releaseBus>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:637
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     de2:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <twi_rxBufferIndex>
     de6:	80 32       	cpi	r24, 0x20	; 32
     de8:	30 f4       	brcc	.+12     	; 0xdf6 <__vector_24+0x234>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     dea:	e0 91 49 03 	lds	r30, 0x0349	; 0x800349 <twi_rxBufferIndex>
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	e6 5b       	subi	r30, 0xB6	; 182
     df2:	fc 4f       	sbci	r31, 0xFC	; 252
     df4:	10 82       	st	Z, r1
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     df6:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <twi_rxBufferIndex>
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <twi_onSlaveReceive>
     e00:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <twi_onSlaveReceive+0x1>
     e04:	8a e4       	ldi	r24, 0x4A	; 74
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	09 95       	icall
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     e0a:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <twi_rxBufferIndex>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:644
      break;
     e0e:	00 cf       	rjmp	.-512    	; 0xc10 <__vector_24+0x4e>
twi_reply():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     e10:	85 ec       	ldi	r24, 0xC5	; 197
     e12:	e0 cf       	rjmp	.-64     	; 0xdd4 <__vector_24+0x212>
__vector_24():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     e14:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <twi_error>
     e18:	29 cf       	rjmp	.-430    	; 0xc6c <__vector_24+0xaa>

00000e1a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     e1a:	fc 01       	movw	r30, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     e1c:	91 8d       	ldd	r25, Z+25	; 0x19
     e1e:	22 8d       	ldd	r18, Z+26	; 0x1a
     e20:	89 2f       	mov	r24, r25
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	80 5c       	subi	r24, 0xC0	; 192
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	82 1b       	sub	r24, r18
     e2a:	91 09       	sbc	r25, r1
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
     e2c:	8f 73       	andi	r24, 0x3F	; 63
     e2e:	99 27       	eor	r25, r25
     e30:	08 95       	ret

00000e32 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
     e32:	fc 01       	movw	r30, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     e34:	91 8d       	ldd	r25, Z+25	; 0x19
     e36:	82 8d       	ldd	r24, Z+26	; 0x1a
     e38:	98 17       	cp	r25, r24
     e3a:	31 f0       	breq	.+12     	; 0xe48 <HardwareSerial::peek()+0x16>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     e3c:	82 8d       	ldd	r24, Z+26	; 0x1a
     e3e:	e8 0f       	add	r30, r24
     e40:	f1 1d       	adc	r31, r1
     e42:	85 8d       	ldd	r24, Z+29	; 0x1d
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	08 95       	ret
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	9f ef       	ldi	r25, 0xFF	; 255
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     e4c:	08 95       	ret

00000e4e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
     e4e:	fc 01       	movw	r30, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     e50:	91 8d       	ldd	r25, Z+25	; 0x19
     e52:	82 8d       	ldd	r24, Z+26	; 0x1a
     e54:	98 17       	cp	r25, r24
     e56:	61 f0       	breq	.+24     	; 0xe70 <HardwareSerial::read()+0x22>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     e58:	a2 8d       	ldd	r26, Z+26	; 0x1a
     e5a:	ae 0f       	add	r26, r30
     e5c:	bf 2f       	mov	r27, r31
     e5e:	b1 1d       	adc	r27, r1
     e60:	5d 96       	adiw	r26, 0x1d	; 29
     e62:	8c 91       	ld	r24, X
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     e64:	92 8d       	ldd	r25, Z+26	; 0x1a
     e66:	9f 5f       	subi	r25, 0xFF	; 255
     e68:	9f 73       	andi	r25, 0x3F	; 63
     e6a:	92 8f       	std	Z+26, r25	; 0x1a
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	08 95       	ret
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	9f ef       	ldi	r25, 0xFF	; 255
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     e74:	08 95       	ret

00000e76 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     e76:	fc 01       	movw	r30, r24
     e78:	53 8d       	ldd	r21, Z+27	; 0x1b
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     e7a:	44 8d       	ldd	r20, Z+28	; 0x1c
     e7c:	25 2f       	mov	r18, r21
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	84 2f       	mov	r24, r20
     e82:	90 e0       	ldi	r25, 0x00	; 0
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     e84:	82 1b       	sub	r24, r18
     e86:	93 0b       	sbc	r25, r19
     e88:	54 17       	cp	r21, r20
     e8a:	10 f0       	brcs	.+4      	; 0xe90 <HardwareSerial::availableForWrite()+0x1a>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
     e8c:	cf 96       	adiw	r24, 0x3f	; 63
     e8e:	08 95       	ret
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     e90:	01 97       	sbiw	r24, 0x01	; 1
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
     e92:	08 95       	ret

00000e94 <serialEventRun()>:
_Z14serialEventRunv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e94:	87 e9       	ldi	r24, 0x97	; 151
     e96:	98 e0       	ldi	r25, 0x08	; 8
     e98:	89 2b       	or	r24, r25
     e9a:	49 f0       	breq	.+18     	; 0xeae <serialEventRun()+0x1a>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	89 2b       	or	r24, r25
     ea2:	29 f0       	breq	.+10     	; 0xeae <serialEventRun()+0x1a>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
     ea4:	0e 94 97 08 	call	0x112e	; 0x112e <Serial0_available()>
     ea8:	81 11       	cpse	r24, r1
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
     eaa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     eae:	08 95       	ret

00000eb0 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     eb0:	fc 01       	movw	r30, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     eb2:	a4 8d       	ldd	r26, Z+28	; 0x1c
     eb4:	a8 0f       	add	r26, r24
     eb6:	b9 2f       	mov	r27, r25
     eb8:	b1 1d       	adc	r27, r1
     eba:	a3 5a       	subi	r26, 0xA3	; 163
     ebc:	bf 4f       	sbci	r27, 0xFF	; 255
     ebe:	2c 91       	ld	r18, X
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     ec0:	84 8d       	ldd	r24, Z+28	; 0x1c
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	8f 73       	andi	r24, 0x3F	; 63
     ec8:	99 27       	eor	r25, r25
     eca:	84 8f       	std	Z+28, r24	; 0x1c
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     ecc:	a6 89       	ldd	r26, Z+22	; 0x16
     ece:	b7 89       	ldd	r27, Z+23	; 0x17
     ed0:	2c 93       	st	X, r18
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     ed2:	a0 89       	ldd	r26, Z+16	; 0x10
     ed4:	b1 89       	ldd	r27, Z+17	; 0x11
     ed6:	8c 91       	ld	r24, X
     ed8:	83 70       	andi	r24, 0x03	; 3
     eda:	80 64       	ori	r24, 0x40	; 64
     edc:	8c 93       	st	X, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     ede:	93 8d       	ldd	r25, Z+27	; 0x1b
     ee0:	84 8d       	ldd	r24, Z+28	; 0x1c
     ee2:	98 13       	cpse	r25, r24
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     ee6:	02 88       	ldd	r0, Z+18	; 0x12
     ee8:	f3 89       	ldd	r31, Z+19	; 0x13
     eea:	e0 2d       	mov	r30, r0
     eec:	80 81       	ld	r24, Z
     eee:	8f 7d       	andi	r24, 0xDF	; 223
     ef0:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     ef2:	08 95       	ret

00000ef4 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	ec 01       	movw	r28, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     efa:	88 8d       	ldd	r24, Y+24	; 0x18
     efc:	88 23       	and	r24, r24
     efe:	b9 f0       	breq	.+46     	; 0xf2e <HardwareSerial::flush()+0x3a>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     f00:	aa 89       	ldd	r26, Y+18	; 0x12
     f02:	bb 89       	ldd	r27, Y+19	; 0x13
     f04:	e8 89       	ldd	r30, Y+16	; 0x10
     f06:	f9 89       	ldd	r31, Y+17	; 0x11
     f08:	8c 91       	ld	r24, X
     f0a:	85 fd       	sbrc	r24, 5
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <HardwareSerial::flush()+0x20>
     f0e:	80 81       	ld	r24, Z
     f10:	86 fd       	sbrc	r24, 6
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <HardwareSerial::flush()+0x3a>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	07 fc       	sbrc	r0, 7
     f18:	f7 cf       	rjmp	.-18     	; 0xf08 <HardwareSerial::flush()+0x14>
     f1a:	8c 91       	ld	r24, X
     f1c:	85 ff       	sbrs	r24, 5
     f1e:	f2 cf       	rjmp	.-28     	; 0xf04 <HardwareSerial::flush()+0x10>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     f20:	80 81       	ld	r24, Z
     f22:	85 ff       	sbrs	r24, 5
     f24:	ed cf       	rjmp	.-38     	; 0xf00 <HardwareSerial::flush()+0xc>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     f26:	ce 01       	movw	r24, r28
     f28:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HardwareSerial::_tx_udr_empty_irq()>
     f2c:	e9 cf       	rjmp	.-46     	; 0xf00 <HardwareSerial::flush()+0xc>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	ec 01       	movw	r28, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	88 8f       	std	Y+24, r24	; 0x18
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     f46:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f48:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f4a:	98 13       	cpse	r25, r24
     f4c:	1a c0       	rjmp	.+52     	; 0xf82 <HardwareSerial::write(unsigned char)+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
     f4e:	e8 89       	ldd	r30, Y+16	; 0x10
     f50:	f9 89       	ldd	r31, Y+17	; 0x11
     f52:	80 81       	ld	r24, Z
     f54:	85 ff       	sbrs	r24, 5
     f56:	15 c0       	rjmp	.+42     	; 0xf82 <HardwareSerial::write(unsigned char)+0x4e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     f58:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/kevinlutzer/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f5a:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     f5c:	ee 89       	ldd	r30, Y+22	; 0x16
     f5e:	ff 89       	ldd	r31, Y+23	; 0x17
     f60:	60 83       	st	Z, r22
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     f62:	e8 89       	ldd	r30, Y+16	; 0x10
     f64:	f9 89       	ldd	r31, Y+17	; 0x11
     f66:	80 81       	ld	r24, Z
     f68:	83 70       	andi	r24, 0x03	; 3
     f6a:	80 64       	ori	r24, 0x40	; 64
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     f6c:	80 83       	st	Z, r24
__iRestore():
/Users/kevinlutzer/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f6e:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	08 95       	ret
     f82:	f6 2e       	mov	r15, r22
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     f84:	0b 8d       	ldd	r16, Y+27	; 0x1b
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	0f 5f       	subi	r16, 0xFF	; 255
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	0f 73       	andi	r16, 0x3F	; 63
     f8e:	11 27       	eor	r17, r17
     f90:	e0 2e       	mov	r14, r16
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     f92:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f94:	8e 11       	cpse	r24, r14
     f96:	0c c0       	rjmp	.+24     	; 0xfb0 <HardwareSerial::write(unsigned char)+0x7c>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	07 fc       	sbrc	r0, 7
     f9c:	fa cf       	rjmp	.-12     	; 0xf92 <HardwareSerial::write(unsigned char)+0x5e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     f9e:	e8 89       	ldd	r30, Y+16	; 0x10
     fa0:	f9 89       	ldd	r31, Y+17	; 0x11
     fa2:	80 81       	ld	r24, Z
     fa4:	85 ff       	sbrs	r24, 5
     fa6:	f5 cf       	rjmp	.-22     	; 0xf92 <HardwareSerial::write(unsigned char)+0x5e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     fa8:	ce 01       	movw	r24, r28
     faa:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HardwareSerial::_tx_udr_empty_irq()>
     fae:	f1 cf       	rjmp	.-30     	; 0xf92 <HardwareSerial::write(unsigned char)+0x5e>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     fb0:	eb 8d       	ldd	r30, Y+27	; 0x1b
     fb2:	ec 0f       	add	r30, r28
     fb4:	fd 2f       	mov	r31, r29
     fb6:	f1 1d       	adc	r31, r1
     fb8:	e3 5a       	subi	r30, 0xA3	; 163
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	f0 82       	st	Z, r15
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     fbe:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/kevinlutzer/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fc0:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     fc2:	0b 8f       	std	Y+27, r16	; 0x1b
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     fc4:	ea 89       	ldd	r30, Y+18	; 0x12
     fc6:	fb 89       	ldd	r31, Y+19	; 0x13
     fc8:	80 81       	ld	r24, Z
     fca:	80 62       	ori	r24, 0x20	; 32
     fcc:	cf cf       	rjmp	.-98     	; 0xf6c <HardwareSerial::write(unsigned char)+0x38>

00000fce <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
     fde:	6a 01       	movw	r12, r20
     fe0:	7b 01       	movw	r14, r22
     fe2:	12 2f       	mov	r17, r18
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     fe4:	e8 89       	ldd	r30, Y+16	; 0x10
     fe6:	f9 89       	ldd	r31, Y+17	; 0x11
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     fec:	c1 14       	cp	r12, r1
     fee:	81 ee       	ldi	r24, 0xE1	; 225
     ff0:	d8 06       	cpc	r13, r24
     ff2:	e1 04       	cpc	r14, r1
     ff4:	f1 04       	cpc	r15, r1
     ff6:	a1 f0       	breq	.+40     	; 0x1020 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:120 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	79 e0       	ldi	r23, 0x09	; 9
     ffc:	8d e3       	ldi	r24, 0x3D	; 61
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a7 01       	movw	r20, r14
    1002:	96 01       	movw	r18, r12
    1004:	0e 94 22 0b 	call	0x1644	; 0x1644 <__udivmodsi4>
    1008:	21 50       	subi	r18, 0x01	; 1
    100a:	31 09       	sbc	r19, r1
    100c:	41 09       	sbc	r20, r1
    100e:	51 09       	sbc	r21, r1
    1010:	56 95       	lsr	r21
    1012:	47 95       	ror	r20
    1014:	37 95       	ror	r19
    1016:	27 95       	ror	r18
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:128 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1018:	21 15       	cp	r18, r1
    101a:	80 e1       	ldi	r24, 0x10	; 16
    101c:	38 07       	cpc	r19, r24
    101e:	98 f0       	brcs	.+38     	; 0x1046 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    1020:	e8 89       	ldd	r30, Y+16	; 0x10
    1022:	f9 89       	ldd	r31, Y+17	; 0x11
    1024:	10 82       	st	Z, r1
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1026:	60 e8       	ldi	r22, 0x80	; 128
    1028:	74 e8       	ldi	r23, 0x84	; 132
    102a:	8e e1       	ldi	r24, 0x1E	; 30
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a7 01       	movw	r20, r14
    1030:	96 01       	movw	r18, r12
    1032:	0e 94 22 0b 	call	0x1644	; 0x1644 <__udivmodsi4>
    1036:	21 50       	subi	r18, 0x01	; 1
    1038:	31 09       	sbc	r19, r1
    103a:	41 09       	sbc	r20, r1
    103c:	51 09       	sbc	r21, r1
    103e:	56 95       	lsr	r21
    1040:	47 95       	ror	r20
    1042:	37 95       	ror	r19
    1044:	27 95       	ror	r18
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1046:	ec 85       	ldd	r30, Y+12	; 0x0c
    1048:	fd 85       	ldd	r31, Y+13	; 0x0d
    104a:	30 83       	st	Z, r19
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    104c:	ee 85       	ldd	r30, Y+14	; 0x0e
    104e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1050:	20 83       	st	Z, r18
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    1052:	18 8e       	std	Y+24, r1	; 0x18
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1054:	ec 89       	ldd	r30, Y+20	; 0x14
    1056:	fd 89       	ldd	r31, Y+21	; 0x15
    1058:	10 83       	st	Z, r17
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    105a:	ea 89       	ldd	r30, Y+18	; 0x12
    105c:	fb 89       	ldd	r31, Y+19	; 0x13
    105e:	80 81       	ld	r24, Z
    1060:	88 69       	ori	r24, 0x98	; 152
    1062:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    1064:	ea 89       	ldd	r30, Y+18	; 0x12
    1066:	fb 89       	ldd	r31, Y+19	; 0x13
    1068:	80 81       	ld	r24, Z
    106a:	8f 7d       	andi	r24, 0xDF	; 223
    106c:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:150
}
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	08 95       	ret

0000107e <__vector_18>:
__vector_18():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    107e:	1f 92       	push	r1
    1080:	0f 92       	push	r0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	2f 93       	push	r18
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1092:	e0 91 a8 03 	lds	r30, 0x03A8	; 0x8003a8 <Serial+0x10>
    1096:	f0 91 a9 03 	lds	r31, 0x03A9	; 0x8003a9 <Serial+0x11>
    109a:	80 81       	ld	r24, Z
    109c:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <Serial+0x16>
    10a0:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <Serial+0x17>
    10a4:	82 fd       	sbrc	r24, 2
    10a6:	1b c0       	rjmp	.+54     	; 0x10de <__vector_18+0x60>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    10a8:	90 81       	ld	r25, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    10aa:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <Serial+0x19>
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	8f 73       	andi	r24, 0x3F	; 63
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    10b2:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <Serial+0x1a>
    10b6:	82 17       	cp	r24, r18
    10b8:	41 f0       	breq	.+16     	; 0x10ca <__vector_18+0x4c>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    10ba:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <Serial+0x19>
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	e8 56       	subi	r30, 0x68	; 104
    10c2:	fc 4f       	sbci	r31, 0xFC	; 252
    10c4:	95 8f       	std	Z+29, r25	; 0x1d
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    10c6:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <Serial+0x19>
__vector_18():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    10de:	80 81       	ld	r24, Z
__vector_18():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    10e0:	f4 cf       	rjmp	.-24     	; 0x10ca <__vector_18+0x4c>

000010e2 <__vector_19>:
__vector_19():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	11 24       	eor	r1, r1
    10ec:	2f 93       	push	r18
    10ee:	3f 93       	push	r19
    10f0:	4f 93       	push	r20
    10f2:	5f 93       	push	r21
    10f4:	6f 93       	push	r22
    10f6:	7f 93       	push	r23
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
    10fc:	af 93       	push	r26
    10fe:	bf 93       	push	r27
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1104:	88 e9       	ldi	r24, 0x98	; 152
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HardwareSerial::_tx_udr_empty_irq()>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <Serial0_available()>:
_Z17Serial0_availablev():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    112e:	88 e9       	ldi	r24, 0x98	; 152
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	0e 94 0d 07 	call	0xe1a	; 0xe1a <HardwareSerial::available()>
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	89 2b       	or	r24, r25
    113a:	09 f4       	brne	.+2      	; 0x113e <Serial0_available()+0x10>
    113c:	20 e0       	ldi	r18, 0x00	; 0
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    113e:	82 2f       	mov	r24, r18
    1140:	08 95       	ret

00001142 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:46
    1142:	e8 e9       	ldi	r30, 0x98	; 152
    1144:	f3 e0       	ldi	r31, 0x03	; 3
    1146:	13 82       	std	Z+3, r1	; 0x03
    1148:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Stream.h:63
    114a:	88 ee       	ldi	r24, 0xE8	; 232
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	a0 e0       	ldi	r26, 0x00	; 0
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	84 83       	std	Z+4, r24	; 0x04
    1154:	95 83       	std	Z+5, r25	; 0x05
    1156:	a6 83       	std	Z+6, r26	; 0x06
    1158:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    115a:	81 ee       	ldi	r24, 0xE1	; 225
    115c:	92 e0       	ldi	r25, 0x02	; 2
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	80 83       	st	Z, r24
    1162:	85 ec       	ldi	r24, 0xC5	; 197
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	95 87       	std	Z+13, r25	; 0x0d
    1168:	84 87       	std	Z+12, r24	; 0x0c
    116a:	84 ec       	ldi	r24, 0xC4	; 196
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	97 87       	std	Z+15, r25	; 0x0f
    1170:	86 87       	std	Z+14, r24	; 0x0e
    1172:	80 ec       	ldi	r24, 0xC0	; 192
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	91 8b       	std	Z+17, r25	; 0x11
    1178:	80 8b       	std	Z+16, r24	; 0x10
    117a:	81 ec       	ldi	r24, 0xC1	; 193
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	93 8b       	std	Z+19, r25	; 0x13
    1180:	82 8b       	std	Z+18, r24	; 0x12
    1182:	82 ec       	ldi	r24, 0xC2	; 194
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	95 8b       	std	Z+21, r25	; 0x15
    1188:	84 8b       	std	Z+20, r24	; 0x14
    118a:	86 ec       	ldi	r24, 0xC6	; 198
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	97 8b       	std	Z+23, r25	; 0x17
    1190:	86 8b       	std	Z+22, r24	; 0x16
    1192:	11 8e       	std	Z+25, r1	; 0x19
    1194:	12 8e       	std	Z+26, r1	; 0x1a
    1196:	13 8e       	std	Z+27, r1	; 0x1b
    1198:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    119a:	08 95       	ret

0000119c <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    119c:	af 92       	push	r10
    119e:	bf 92       	push	r11
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	6c 01       	movw	r12, r24
    11b2:	7b 01       	movw	r14, r22
    11b4:	8b 01       	movw	r16, r22
    11b6:	04 0f       	add	r16, r20
    11b8:	15 1f       	adc	r17, r21
    11ba:	eb 01       	movw	r28, r22
    11bc:	5e 01       	movw	r10, r28
    11be:	ae 18       	sub	r10, r14
    11c0:	bf 08       	sbc	r11, r15
    11c2:	c0 17       	cp	r28, r16
    11c4:	d1 07       	cpc	r29, r17
    11c6:	59 f0       	breq	.+22     	; 0x11de <Print::write(unsigned char const*, unsigned int)+0x42>
    11c8:	69 91       	ld	r22, Y+
    11ca:	d6 01       	movw	r26, r12
    11cc:	ed 91       	ld	r30, X+
    11ce:	fc 91       	ld	r31, X
    11d0:	01 90       	ld	r0, Z+
    11d2:	f0 81       	ld	r31, Z
    11d4:	e0 2d       	mov	r30, r0
    11d6:	c6 01       	movw	r24, r12
    11d8:	09 95       	icall
    11da:	89 2b       	or	r24, r25
    11dc:	79 f7       	brne	.-34     	; 0x11bc <Print::write(unsigned char const*, unsigned int)+0x20>
    11de:	c5 01       	movw	r24, r10
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	bf 90       	pop	r11
    11f2:	af 90       	pop	r10
    11f4:	08 95       	ret

000011f6 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    11f6:	fb 01       	movw	r30, r22
    11f8:	01 90       	ld	r0, Z+
    11fa:	00 20       	and	r0, r0
    11fc:	e9 f7       	brne	.-6      	; 0x11f8 <Print::write(char const*) [clone .part.2]+0x2>
    11fe:	31 97       	sbiw	r30, 0x01	; 1
    1200:	af 01       	movw	r20, r30
    1202:	46 1b       	sub	r20, r22
    1204:	57 0b       	sbc	r21, r23
    1206:	dc 01       	movw	r26, r24
    1208:	ed 91       	ld	r30, X+
    120a:	fc 91       	ld	r31, X
    120c:	02 80       	ldd	r0, Z+2	; 0x02
    120e:	f3 81       	ldd	r31, Z+3	; 0x03
    1210:	e0 2d       	mov	r30, r0
    1212:	09 94       	ijmp

00001214 <Print::println()>:
    1214:	6f ee       	ldi	r22, 0xEF	; 239
    1216:	72 e0       	ldi	r23, 0x02	; 2
    1218:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <Print::write(char const*) [clone .part.2]>

0000121c <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    1226:	d0 e0       	ldi	r29, 0x00	; 0
    1228:	c0 e0       	ldi	r28, 0x00	; 0
    122a:	61 15       	cp	r22, r1
    122c:	71 05       	cpc	r23, r1
    122e:	19 f0       	breq	.+6      	; 0x1236 <Print::println(char const*)+0x1a>
    1230:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Print::write(char const*) [clone .part.2]>
    1234:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    1236:	c8 01       	movw	r24, r16
    1238:	0e 94 0a 09 	call	0x1214	; 0x1214 <Print::println()>
    123c:	8c 0f       	add	r24, r28
    123e:	9d 1f       	adc	r25, r29
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	08 95       	ret

0000124a <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    124a:	8f 92       	push	r8
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	a1 97       	sbiw	r28, 0x21	; 33
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	7c 01       	movw	r14, r24
    1270:	fa 01       	movw	r30, r20
    1272:	cb 01       	movw	r24, r22
    1274:	19 a2       	std	Y+33, r1	; 0x21
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	08 f4       	brcc	.+2      	; 0x127c <Print::printNumber(unsigned long, unsigned char)+0x32>
    127a:	2a e0       	ldi	r18, 0x0A	; 10
    127c:	8e 01       	movw	r16, r28
    127e:	0f 5d       	subi	r16, 0xDF	; 223
    1280:	1f 4f       	sbci	r17, 0xFF	; 255
    1282:	82 2e       	mov	r8, r18
    1284:	91 2c       	mov	r9, r1
    1286:	b1 2c       	mov	r11, r1
    1288:	a1 2c       	mov	r10, r1
    128a:	bf 01       	movw	r22, r30
    128c:	a5 01       	movw	r20, r10
    128e:	94 01       	movw	r18, r8
    1290:	0e 94 22 0b 	call	0x1644	; 0x1644 <__udivmodsi4>
    1294:	f9 01       	movw	r30, r18
    1296:	ca 01       	movw	r24, r20
    1298:	6a 30       	cpi	r22, 0x0A	; 10
    129a:	0c f5       	brge	.+66     	; 0x12de <Print::printNumber(unsigned long, unsigned char)+0x94>
    129c:	60 5d       	subi	r22, 0xD0	; 208
    129e:	d8 01       	movw	r26, r16
    12a0:	6e 93       	st	-X, r22
    12a2:	8d 01       	movw	r16, r26
    12a4:	23 2b       	or	r18, r19
    12a6:	24 2b       	or	r18, r20
    12a8:	25 2b       	or	r18, r21
    12aa:	79 f7       	brne	.-34     	; 0x128a <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	10 97       	sbiw	r26, 0x00	; 0
    12b2:	21 f0       	breq	.+8      	; 0x12bc <Print::printNumber(unsigned long, unsigned char)+0x72>
    12b4:	bd 01       	movw	r22, r26
    12b6:	c7 01       	movw	r24, r14
    12b8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    12bc:	a1 96       	adiw	r28, 0x21	; 33
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	9f 90       	pop	r9
    12da:	8f 90       	pop	r8
    12dc:	08 95       	ret
    12de:	69 5c       	subi	r22, 0xC9	; 201
    12e0:	de cf       	rjmp	.-68     	; 0x129e <Print::printNumber(unsigned long, unsigned char)+0x54>

000012e2 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    12e2:	21 15       	cp	r18, r1
    12e4:	31 05       	cpc	r19, r1
    12e6:	41 f4       	brne	.+16     	; 0x12f8 <Print::print(unsigned long, int)+0x16>
    12e8:	dc 01       	movw	r26, r24
    12ea:	ed 91       	ld	r30, X+
    12ec:	fc 91       	ld	r31, X
    12ee:	01 90       	ld	r0, Z+
    12f0:	f0 81       	ld	r31, Z
    12f2:	e0 2d       	mov	r30, r0
    12f4:	64 2f       	mov	r22, r20
    12f6:	09 94       	ijmp
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
    12f8:	0c 94 25 09 	jmp	0x124a	; 0x124a <Print::printNumber(unsigned long, unsigned char)>

000012fc <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    12fc:	9a 01       	movw	r18, r20
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
    12fe:	46 2f       	mov	r20, r22
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <Print::print(unsigned long, int)>

0000130a <initVariant>:
initVariant():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    130a:	08 95       	ret

0000130c <main>:
main():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    130c:	0e 94 3d 0a 	call	0x147a	; 0x147a <init>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    1310:	0e 94 85 09 	call	0x130a	; 0x130a <initVariant>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1314:	0e 94 93 00 	call	0x126	; 0x126 <setup>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1318:	ca e4       	ldi	r28, 0x4A	; 74
    131a:	d7 e0       	ldi	r29, 0x07	; 7
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    131c:	0e 94 b8 00 	call	0x170	; 0x170 <loop>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1320:	20 97       	sbiw	r28, 0x00	; 0
    1322:	e1 f3       	breq	.-8      	; 0x131c <main+0x10>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1324:	0e 94 4a 07 	call	0xe94	; 0xe94 <serialEventRun()>
    1328:	f9 cf       	rjmp	.-14     	; 0x131c <main+0x10>

0000132a <__vector_16>:
__vector_16():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	2f 93       	push	r18
    1336:	3f 93       	push	r19
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
    133c:	af 93       	push	r26
    133e:	bf 93       	push	r27
    1340:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <timer0_millis>
    1344:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <timer0_millis+0x1>
    1348:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <timer0_millis+0x2>
    134c:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <timer0_millis+0x3>
    1350:	30 91 39 04 	lds	r19, 0x0439	; 0x800439 <timer0_fract>
    1354:	23 e0       	ldi	r18, 0x03	; 3
    1356:	23 0f       	add	r18, r19
    1358:	2d 37       	cpi	r18, 0x7D	; 125
    135a:	68 f1       	brcs	.+90     	; 0x13b6 <__vector_16+0x8c>
    135c:	26 e8       	ldi	r18, 0x86	; 134
    135e:	23 0f       	add	r18, r19
    1360:	02 96       	adiw	r24, 0x02	; 2
    1362:	a1 1d       	adc	r26, r1
    1364:	b1 1d       	adc	r27, r1
    1366:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <timer0_fract>
    136a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <timer0_millis>
    136e:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <timer0_millis+0x1>
    1372:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <timer0_millis+0x2>
    1376:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <timer0_millis+0x3>
    137a:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <timer0_overflow_count>
    137e:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <timer0_overflow_count+0x1>
    1382:	a0 91 37 04 	lds	r26, 0x0437	; 0x800437 <timer0_overflow_count+0x2>
    1386:	b0 91 38 04 	lds	r27, 0x0438	; 0x800438 <timer0_overflow_count+0x3>
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	a1 1d       	adc	r26, r1
    138e:	b1 1d       	adc	r27, r1
    1390:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <timer0_overflow_count>
    1394:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <timer0_overflow_count+0x1>
    1398:	a0 93 37 04 	sts	0x0437, r26	; 0x800437 <timer0_overflow_count+0x2>
    139c:	b0 93 38 04 	sts	0x0438, r27	; 0x800438 <timer0_overflow_count+0x3>
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	3f 91       	pop	r19
    13aa:	2f 91       	pop	r18
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	a1 1d       	adc	r26, r1
    13ba:	b1 1d       	adc	r27, r1
    13bc:	d4 cf       	rjmp	.-88     	; 0x1366 <__vector_16+0x3c>

000013be <micros>:
micros():
    13be:	3f b7       	in	r19, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <timer0_overflow_count>
    13c6:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <timer0_overflow_count+0x1>
    13ca:	a0 91 37 04 	lds	r26, 0x0437	; 0x800437 <timer0_overflow_count+0x2>
    13ce:	b0 91 38 04 	lds	r27, 0x0438	; 0x800438 <timer0_overflow_count+0x3>
    13d2:	26 b5       	in	r18, 0x26	; 38
    13d4:	a8 9b       	sbis	0x15, 0	; 21
    13d6:	05 c0       	rjmp	.+10     	; 0x13e2 <micros+0x24>
    13d8:	2f 3f       	cpi	r18, 0xFF	; 255
    13da:	19 f0       	breq	.+6      	; 0x13e2 <micros+0x24>
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	a1 1d       	adc	r26, r1
    13e0:	b1 1d       	adc	r27, r1
    13e2:	3f bf       	out	0x3f, r19	; 63
    13e4:	ba 2f       	mov	r27, r26
    13e6:	a9 2f       	mov	r26, r25
    13e8:	98 2f       	mov	r25, r24
    13ea:	88 27       	eor	r24, r24
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	62 0f       	add	r22, r18
    13f2:	71 1d       	adc	r23, r1
    13f4:	81 1d       	adc	r24, r1
    13f6:	91 1d       	adc	r25, r1
    13f8:	42 e0       	ldi	r20, 0x02	; 2
    13fa:	66 0f       	add	r22, r22
    13fc:	77 1f       	adc	r23, r23
    13fe:	88 1f       	adc	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	4a 95       	dec	r20
    1404:	d1 f7       	brne	.-12     	; 0x13fa <micros+0x3c>
    1406:	08 95       	ret

00001408 <delay>:
delay():
    1408:	8f 92       	push	r8
    140a:	9f 92       	push	r9
    140c:	af 92       	push	r10
    140e:	bf 92       	push	r11
    1410:	cf 92       	push	r12
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	6b 01       	movw	r12, r22
    141a:	7c 01       	movw	r14, r24
    141c:	0e 94 df 09 	call	0x13be	; 0x13be <micros>
    1420:	4b 01       	movw	r8, r22
    1422:	5c 01       	movw	r10, r24
    1424:	c1 14       	cp	r12, r1
    1426:	d1 04       	cpc	r13, r1
    1428:	e1 04       	cpc	r14, r1
    142a:	f1 04       	cpc	r15, r1
    142c:	e9 f0       	breq	.+58     	; 0x1468 <delay+0x60>
    142e:	0e 94 21 0b 	call	0x1642	; 0x1642 <yield>
    1432:	0e 94 df 09 	call	0x13be	; 0x13be <micros>
    1436:	68 19       	sub	r22, r8
    1438:	79 09       	sbc	r23, r9
    143a:	8a 09       	sbc	r24, r10
    143c:	9b 09       	sbc	r25, r11
    143e:	68 3e       	cpi	r22, 0xE8	; 232
    1440:	73 40       	sbci	r23, 0x03	; 3
    1442:	81 05       	cpc	r24, r1
    1444:	91 05       	cpc	r25, r1
    1446:	70 f3       	brcs	.-36     	; 0x1424 <delay+0x1c>
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	c2 1a       	sub	r12, r18
    144c:	d1 08       	sbc	r13, r1
    144e:	e1 08       	sbc	r14, r1
    1450:	f1 08       	sbc	r15, r1
    1452:	88 ee       	ldi	r24, 0xE8	; 232
    1454:	88 0e       	add	r8, r24
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	98 1e       	adc	r9, r24
    145a:	a1 1c       	adc	r10, r1
    145c:	b1 1c       	adc	r11, r1
    145e:	c1 14       	cp	r12, r1
    1460:	d1 04       	cpc	r13, r1
    1462:	e1 04       	cpc	r14, r1
    1464:	f1 04       	cpc	r15, r1
    1466:	29 f7       	brne	.-54     	; 0x1432 <delay+0x2a>
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	9f 90       	pop	r9
    1476:	8f 90       	pop	r8
    1478:	08 95       	ret

0000147a <init>:
init():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    147a:	78 94       	sei
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    147c:	84 b5       	in	r24, 0x24	; 36
    147e:	83 60       	ori	r24, 0x03	; 3
    1480:	84 bd       	out	0x24, r24	; 36
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1482:	85 b5       	in	r24, 0x25	; 37
    1484:	83 60       	ori	r24, 0x03	; 3
    1486:	85 bd       	out	0x25, r24	; 37
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1488:	ee e6       	ldi	r30, 0x6E	; 110
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	81 60       	ori	r24, 0x01	; 1
    1490:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1492:	e1 e8       	ldi	r30, 0x81	; 129
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    149a:	80 81       	ld	r24, Z
    149c:	81 60       	ori	r24, 0x01	; 1
    149e:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    14a0:	e0 e8       	ldi	r30, 0x80	; 128
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	81 60       	ori	r24, 0x01	; 1
    14a8:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    14aa:	e1 eb       	ldi	r30, 0xB1	; 177
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	84 60       	ori	r24, 0x04	; 4
    14b2:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    14b4:	e0 eb       	ldi	r30, 0xB0	; 176
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	81 60       	ori	r24, 0x01	; 1
    14bc:	80 83       	st	Z, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    14be:	87 e8       	ldi	r24, 0x87	; 135
    14c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    14c4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    14c8:	08 95       	ret

000014ca <turnOffPWM>:
turnOffPWM():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	81 f0       	breq	.+32     	; 0x14ee <turnOffPWM+0x24>
    14ce:	28 f4       	brcc	.+10     	; 0x14da <turnOffPWM+0x10>
    14d0:	82 30       	cpi	r24, 0x02	; 2
    14d2:	e9 f0       	breq	.+58     	; 0x150e <turnOffPWM+0x44>
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	f9 f0       	breq	.+62     	; 0x1516 <turnOffPWM+0x4c>
    14d8:	08 95       	ret
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	71 f0       	breq	.+28     	; 0x14fa <turnOffPWM+0x30>
    14de:	89 30       	cpi	r24, 0x09	; 9
    14e0:	91 f0       	breq	.+36     	; 0x1506 <turnOffPWM+0x3c>
    14e2:	85 30       	cpi	r24, 0x05	; 5
    14e4:	b9 f4       	brne	.+46     	; 0x1514 <turnOffPWM+0x4a>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    14e6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    14ea:	8f 7d       	andi	r24, 0xDF	; 223
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <turnOffPWM+0x2a>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    14ee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    14f2:	8f 77       	andi	r24, 0x7F	; 127
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    14f4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    14f8:	08 95       	ret
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    14fa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    14fe:	8f 77       	andi	r24, 0x7F	; 127
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1500:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    1504:	08 95       	ret
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1506:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    150a:	8f 7d       	andi	r24, 0xDF	; 223
    150c:	f9 cf       	rjmp	.-14     	; 0x1500 <turnOffPWM+0x36>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    150e:	84 b5       	in	r24, 0x24	; 36
    1510:	8f 77       	andi	r24, 0x7F	; 127
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1512:	84 bd       	out	0x24, r24	; 36
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1514:	08 95       	ret
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1516:	84 b5       	in	r24, 0x24	; 36
    1518:	8f 7d       	andi	r24, 0xDF	; 223
    151a:	fb cf       	rjmp	.-10     	; 0x1512 <turnOffPWM+0x48>

0000151c <pinMode>:
pinMode():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	fc 01       	movw	r30, r24
    1524:	e1 58       	subi	r30, 0x81	; 129
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	24 91       	lpm	r18, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    152a:	8a 56       	subi	r24, 0x6A	; 106
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	fc 01       	movw	r30, r24
    1530:	84 91       	lpm	r24, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1532:	88 23       	and	r24, r24
    1534:	c9 f0       	breq	.+50     	; 0x1568 <pinMode+0x4c>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	fc 01       	movw	r30, r24
    153e:	ef 53       	subi	r30, 0x3F	; 63
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	a5 91       	lpm	r26, Z+
    1544:	b4 91       	lpm	r27, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1546:	fc 01       	movw	r30, r24
    1548:	e9 54       	subi	r30, 0x49	; 73
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	c5 91       	lpm	r28, Z+
    154e:	d4 91       	lpm	r29, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1550:	61 11       	cpse	r22, r1
    1552:	0d c0       	rjmp	.+26     	; 0x156e <pinMode+0x52>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1554:	9f b7       	in	r25, 0x3f	; 63
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    1556:	f8 94       	cli
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1558:	8c 91       	ld	r24, X
    155a:	20 95       	com	r18
    155c:	82 23       	and	r24, r18
    155e:	8c 93       	st	X, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1560:	88 81       	ld	r24, Y
    1562:	28 23       	and	r18, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1564:	28 83       	st	Y, r18
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1566:	9f bf       	out	0x3f, r25	; 63
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    156e:	62 30       	cpi	r22, 0x02	; 2
    1570:	51 f4       	brne	.+20     	; 0x1586 <pinMode+0x6a>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1572:	9f b7       	in	r25, 0x3f	; 63
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    1574:	f8 94       	cli
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1576:	3c 91       	ld	r19, X
    1578:	82 2f       	mov	r24, r18
    157a:	80 95       	com	r24
    157c:	83 23       	and	r24, r19
    157e:	8c 93       	st	X, r24
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1580:	e8 81       	ld	r30, Y
    1582:	2e 2b       	or	r18, r30
    1584:	ef cf       	rjmp	.-34     	; 0x1564 <pinMode+0x48>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1586:	8f b7       	in	r24, 0x3f	; 63
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    1588:	f8 94       	cli
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    158a:	ec 91       	ld	r30, X
    158c:	2e 2b       	or	r18, r30
    158e:	2c 93       	st	X, r18
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1590:	8f bf       	out	0x3f, r24	; 63
    1592:	ea cf       	rjmp	.-44     	; 0x1568 <pinMode+0x4c>

00001594 <digitalWrite>:
digitalWrite():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	f9 01       	movw	r30, r18
    15a0:	e8 59       	subi	r30, 0x98	; 152
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	84 91       	lpm	r24, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    15a6:	f9 01       	movw	r30, r18
    15a8:	e1 58       	subi	r30, 0x81	; 129
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	d4 91       	lpm	r29, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    15ae:	f9 01       	movw	r30, r18
    15b0:	ea 56       	subi	r30, 0x6A	; 106
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	c4 91       	lpm	r28, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    15b6:	cc 23       	and	r28, r28
    15b8:	a9 f0       	breq	.+42     	; 0x15e4 <digitalWrite+0x50>
    15ba:	16 2f       	mov	r17, r22
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15bc:	81 11       	cpse	r24, r1
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    15be:	0e 94 65 0a 	call	0x14ca	; 0x14ca <turnOffPWM>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    15c2:	ec 2f       	mov	r30, r28
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	e9 54       	subi	r30, 0x49	; 73
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	a5 91       	lpm	r26, Z+
    15d0:	b4 91       	lpm	r27, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    15d2:	8f b7       	in	r24, 0x3f	; 63
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    15d4:	f8 94       	cli
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    15d6:	ec 91       	ld	r30, X
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    15d8:	11 11       	cpse	r17, r1
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <digitalWrite+0x58>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    15dc:	d0 95       	com	r29
    15de:	de 23       	and	r29, r30
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    15e0:	dc 93       	st	X, r29
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    15e2:	8f bf       	out	0x3f, r24	; 63
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	08 95       	ret
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    15ec:	de 2b       	or	r29, r30
    15ee:	f8 cf       	rjmp	.-16     	; 0x15e0 <digitalWrite+0x4c>

000015f0 <digitalRead>:
digitalRead():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	e8 59       	subi	r30, 0x98	; 152
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	84 91       	lpm	r24, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1600:	f9 01       	movw	r30, r18
    1602:	e1 58       	subi	r30, 0x81	; 129
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	d4 91       	lpm	r29, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1608:	f9 01       	movw	r30, r18
    160a:	ea 56       	subi	r30, 0x6A	; 106
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	c4 91       	lpm	r28, Z
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1610:	cc 23       	and	r28, r28
    1612:	a1 f0       	breq	.+40     	; 0x163c <digitalRead+0x4c>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1614:	81 11       	cpse	r24, r1
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1616:	0e 94 65 0a 	call	0x14ca	; 0x14ca <turnOffPWM>
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    161a:	ec 2f       	mov	r30, r28
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	e3 55       	subi	r30, 0x53	; 83
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	a5 91       	lpm	r26, Z+
    1628:	b4 91       	lpm	r27, Z
    162a:	ec 91       	ld	r30, X
    162c:	ed 23       	and	r30, r29
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	09 f4       	brne	.+2      	; 0x1636 <digitalRead+0x46>
    1634:	80 e0       	ldi	r24, 0x00	; 0
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	fa cf       	rjmp	.-12     	; 0x1636 <digitalRead+0x46>

00001642 <yield>:
__empty():
/Users/kevinlutzer/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    1642:	08 95       	ret

00001644 <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1644:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1646:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1648:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    164a:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    164c:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    164e:	0d c0       	rjmp	.+26     	; 0x166a <__udivmodsi4_ep>

00001650 <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1650:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1652:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1654:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1656:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1658:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    165a:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    165c:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    165e:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1660:	20 f0       	brcs	.+8      	; 0x166a <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1662:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1664:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1666:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1668:	f5 0b       	sbc	r31, r21

0000166a <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    166a:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    166c:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    166e:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1670:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1672:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1674:	69 f7       	brne	.-38     	; 0x1650 <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1676:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1678:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    167a:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    167c:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    167e:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1680:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1682:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1684:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1686:	08 95       	ret

00001688 <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1688:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    168a:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    168c:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    168e:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1690:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1692:	09 94       	ijmp

00001694 <memcpy>:
memcpy():
    1694:	fb 01       	movw	r30, r22
    1696:	dc 01       	movw	r26, r24
    1698:	02 c0       	rjmp	.+4      	; 0x169e <memcpy+0xa>
    169a:	01 90       	ld	r0, Z+
    169c:	0d 92       	st	X+, r0
    169e:	41 50       	subi	r20, 0x01	; 1
    16a0:	50 40       	sbci	r21, 0x00	; 0
    16a2:	d8 f7       	brcc	.-10     	; 0x169a <memcpy+0x6>
    16a4:	08 95       	ret

000016a6 <_exit>:
exit():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    16a6:	f8 94       	cli

000016a8 <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    16a8:	ff cf       	rjmp	.-2      	; 0x16a8 <__stop_program>
